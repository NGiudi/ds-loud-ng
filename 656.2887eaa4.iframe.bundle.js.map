{"version":3,"file":"656.2887eaa4.iframe.bundle.js","mappings":";;;;;AASA;AAEA;AAGA;;;AAGA;;;AA4BA;;;;;AAlBA;AACA;AACA;;AAiBA;;;;;AARA;AACA;;;;;AChCA;AAEA;AAGA;;AAEA;AACA;;;;;ACPA;;;;;AAKA;AAEA;;;;AAIA;;AAIA;;;;AAIA;AAEA;;ACmHA;;;;;;;AArIA;AAEA;AACA;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;AAEA;AACA;;;;;AAKA;AAEA;AACA;;;;;;;AAOA;AAEA;AACA;;;AAmGA;;;;;;;;AAtFA;AAEA;AACA;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;AAEA;AACA;;;;;AAKA;AAEA;AACA;;;;;;;AAOA;AAEA;;;AAoDA;;;;;;;;AAvCA;AAEA;AAGA;AACA;AACA;;AAEA;;;;AAIA;AAEA;;;;;AAKA;AAEA;;;;;;;AAOA;AAEA;;;ACjIA;;;ACHA;ACJA;;;ACMA;ACNA;AAEA;;;;;;AAMA;AAEA;;;;;;;;ACRA;;;;;;;ACIA;AAEA;AACA;AACA;;AAIA;;;;AAIA;AAEA;AACA;AACA;;AAEA;;AClBA;;ACHA;;;ACGA;ACFA;AAEA;AACA;AACA;;AAsBA;;;;;AAbA;AAEA;AAGA;AACA;AACA;;ACxBA;;;;;;;;;;ACWA;AAEA;;;;AAIA;AAEA;;;;;AAKA;AAEA;;;;;;;AAOA;AAEA;AACA;;;AC9BA;;;;;ACAA;AAEA;AACA;AACA;AACA;;AAEA;;ACTA;;;ACAA;AAEA;AACA;;AAEA;;AAEA;;ACXA;ACIA;AAEA;AACA;AACA;AACA;;AAwDA;AAnDA;AAEA;;AAEA;;AAgDA;;;;;;;AArCA;AAEA;AACA;AACA;AACA;;AAiCA;;;;;;;AAtBA;AAEA;AACA;AACA;;AAEA;AACA;;AAgBA;AAXA;AAEA;;AC3DA;;ACkDA;;;AA1CA;AAEA;AACA;;AAwCA;AAnCA;AAEA;;AAkCA;;;;;;;;;;AACA;;;;AAfA;AAEA;AACA;;ACnCA;;;ACFA;AAEA;;AA4CA;;;;AApCA;AAEA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;AAGA;AACA;;AAiBA;;;;AATA;AAEA;;AC5CA;ACEA;AAEA;AACA;AAEA;;AAoBA;;;;AAZA;AAEA;AACA;;AAGA;;ACnBA;;;;;;;;ACKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;AAkCA;;AACA;;;;;;;AAnBA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAaA;;;AC/DA;;;;ACGA;;AAGA;;;ACAA;ACJA;AAEA;;ACEA;ACJA;AAwCA;;;;;;;AA5BA;AA6BA;AARA;ACnCA;ACEA;AAsCA;;;;AA5BA;AA6BA;AARA;ACxBA;;;ACLA;AAEA;AACA;;AAEA;;AAyCA;;;;;AAhCA;AAEA;AAGA;;AAEA;;;AAGA;;;AAuBA;AAjBA;AAEA;;AAgBA;AAXA;AAEA;AACA;;AC5CA;ACGA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAIA;AACA;AAQA;;AAHA;AAKA;AC1BA;AAEA;;;;;ACAA;AAEA;AACA;AACA;;AAEA;;AAEA;;;;ACbA;;;ACIA;AAEA;AACA;;AAEA;;ACTA;;;;;;;;ACSA;AACA;AACA;AACA;AACA;;;;;ACTA;AACA;AACA;;AAEA;;AAqEA;;;;;;AAxDA;AACA;;AAIA;;;AAKA;;;AAGA;;AA4CA;;;AAlCA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;AAsBA;;;;;AAZA;AACA;AACA;AACA;;AC7DA;;;;;;ACFA;AACA;AACA;;;AAOA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;AAOA;;;;AAIA;AACA;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;;ACjDA;;;ACHA;;;;;ACEA;;;ACaA;;;;;AAXA;AAEA;AAGA;;ACDA;;;ACRA;AAEA;;ACUA;;;;;;ACYA;AAlBA;AAXA;AAiCA;AACA;AACA;AAnCA;AAuCA;;;AAKA;;;;ACrCA","sources":["webpack://ds-loud-ng/./src/components/atoms/Avatar/Avatar.styles.js","webpack://ds-loud-ng/./src/components/atoms/Badge/Badge.styles.js","webpack://ds-loud-ng/./src/components/atoms/Button/Wrappers.styles.js","webpack://ds-loud-ng/./src/components/atoms/Button/Button.styles.js","webpack://ds-loud-ng/./src/components/atoms/Button/Button.jsx","webpack://ds-loud-ng/./src/components/atoms/Divider/Divider.styles.js","webpack://ds-loud-ng/./src/components/atoms/Divider/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/Dropdown.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownItem/DropdownItem.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownItem/DropdownItem.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownPanel/DropdownPanel.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownPanel/DropdownPanel.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownToogle/DropdownToogle.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownToogle/DropdownToogle.jsx","webpack://ds-loud-ng/./src/components/atoms/Icon/Icon.styles.js","webpack://ds-loud-ng/./src/components/atoms/Icon/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/IconButton/IconButton.styles.js","webpack://ds-loud-ng/./src/components/atoms/IconButton/IconButton.jsx","webpack://ds-loud-ng/./src/components/atoms/Image/components/ImagePlaceholder/ImagePlaceholder.styles.js","webpack://ds-loud-ng/./src/components/atoms/Image/components/ImagePlaceholder/ImagePlaceholder.jsx","webpack://ds-loud-ng/./src/components/atoms/Image/Image.styles.js","webpack://ds-loud-ng/./src/components/atoms/Image/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/Input/Input.styles.js","webpack://ds-loud-ng/./src/components/atoms/Input/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/Modal/Modal.styles.js","webpack://ds-loud-ng/./src/components/atoms/Modal/Modal.jsx","webpack://ds-loud-ng/./src/components/atoms/Panel/Panel.styles.js","webpack://ds-loud-ng/./src/components/atoms/Panel/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/ProgressBar/ProgressBar.styles.js","webpack://ds-loud-ng/./src/components/atoms/ProgressBar/components/Bar.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectContent/SelectContent.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectOption/SelectOption.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectOption/SelectOption.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/Select.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectValue/SelectValue.jsx","webpack://ds-loud-ng/./src/components/atoms/Table/components/DesktopTable/DesktopTable.styles.js","webpack://ds-loud-ng/./src/components/atoms/Table/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/Table/components/PhoneTable/PhoneTable.styles.js","webpack://ds-loud-ng/./src/components/atoms/Table/components/PhoneTable/PhoneTable.jsx","webpack://ds-loud-ng/./src/components/atoms/Tabs/Tabs.styles.js","webpack://ds-loud-ng/./src/components/atoms/Tabs/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/atoms/Text/Text.styles.js","webpack://ds-loud-ng/./src/components/layout/Box/Box.styles.js","webpack://ds-loud-ng/./src/components/layout/Columns/Columns.styles.js","webpack://ds-loud-ng/./src/components/layout/Columns/utils/propsFliter.js","webpack://ds-loud-ng/./src/components/layout/Flex/Flex.styles.js","webpack://ds-loud-ng/./src/components/layout/Flex/utils/propsFilter.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/OfflineBadge/OfflineBadge.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/SideBar/SideBar.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/SideBar/SideBar.jsx","webpack://ds-loud-ng/./src/components/molecules/AppLayout/AppLayout.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/AppLayout.jsx","webpack://ds-loud-ng/./src/components/molecules/Pagination/components/PaginateButton/PaginateButton.jsx","webpack://ds-loud-ng/./src/components/molecules/Pagination/Pagination.styles.js","webpack://ds-loud-ng/./src/components/molecules/RulesPanel/components/RightPanel/RightPanel.styles.js","webpack://ds-loud-ng/./src/components/molecules/RulesPanel/components/RightPanel/RightPanel.jsx","webpack://ds-loud-ng/./src/components/molecules/RulesPanel/components/LeftPanel/LeftPanel.styles.js","webpack://ds-loud-ng/./src/components/molecules/RulesPanel/components/LeftPanel/LeftPanel.jsx","webpack://ds-loud-ng/./src/components/molecules/StpesBar/StepsBar.styles.js","webpack://ds-loud-ng/./src/components/molecules/StpesBar/StepsBar.jsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst AvatarWrapper = styled.div`\r\n  border-radius: 50%;\r\n  border-style: solid;\r\n  display: inline-block;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-color: ${props.isSelected\r\n        ? `${props.theme.colors.black._500}`\r\n        : \"transparent\"};\r\n      border-width: ${props.theme.components.avatar.thickShadow};\r\n\r\n      &:hover {\r\n        border-color: ${!props.isSelected && props.theme.colors.black._600};\r\n      }\r\n    `}\r\n`;\r\n\r\nconst PanelWrapper = styled.div`\r\n  position: absolute;\r\n  top: 100%;\r\n  width: 250px;\r\n\r\n  ${(props) => css`\r\n    ${props.pos}: 0;\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  width: fit-content;\r\n\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  AvatarWrapper,\r\n  PanelWrapper,\r\n  Wrapper,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${typeof props.color === \"object\"\r\n        ? props.theme.colors[props.color.tone][`_${props.color.intensity}`]\r\n        : props.color};\r\n      border-radius: ${props.theme.components.badge.border.radius};\r\n\r\n      ${marginProperties(props)}\r\n      ${paddingProperties(props, props.theme.components.badge.padding)}\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import styled, { css, keyframes } from \"styled-components\";\r\n\r\n//? loading animation\r\nconst rotate = keyframes`\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n`;\r\n\r\nexport const LoaderWrapper = styled.span`\r\n  left: calc(50% - 10px); /* TODO: 10px = half icon size */\r\n  position: absolute;\r\n  top: calc(50% - 10px); /* TODO: 10px = half icon size */\r\n\r\n  ${(props) =>\r\n    css`\r\n      animation-name: ${rotate};\r\n      animation-duration: 1.5s;\r\n      animation-iteration-count: infinite;\r\n      animation-timing-function: ease-in-out;\r\n      display: ${props.loading ? \"block\" : \"none\"};\r\n    `}\r\n`;\r\n\r\nexport const ContentWrapper = styled.span`\r\n  align-items: center;\r\n  display: flex;\r\n\r\n  ${(props) =>\r\n    css`\r\n      visibility: ${props.loading ? \"hidden\" : \"visible\"};\r\n    `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst OutlinedButton = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  position: relative;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border: 1px solid ${props.theme.colors.orange._600};\r\n      border-radius: ${props.border\r\n        ? props.border.radius\r\n        : props.theme.components.button.outlined.borderRadius};\r\n      color: ${props.theme.colors.orange._600};\r\n      height: ${props.theme.components.button.outlined.height};\r\n      padding: ${props.theme.components.button.outlined.padding};\r\n      width: ${props.fullWidth ? \"100%\" : \"auto\"};\r\n\r\n      ${marginProperties(props)}\r\n    `}\r\n\r\n  &:hover:enabled {\r\n    ${(props) =>\r\n      css`\r\n        border-color: ${!props.loading && props.theme.colors.orange._800};\r\n        color: ${!props.loading && props.theme.colors.orange._800};\r\n      `}\r\n  }\r\n\r\n  &:active:enabled {\r\n    ${(props) =>\r\n      css`\r\n        border-color: ${!props.loading && props.theme.colors.orange._900};\r\n        color: ${!props.loading && props.theme.colors.orange._900};\r\n      `}\r\n  }\r\n\r\n  &:disabled {\r\n    box-shadow: none;\r\n\r\n    ${(props) =>\r\n      css`\r\n        border-color: ${props.theme.colors.black._400};\r\n        color: ${props.theme.colors.black._400};\r\n      `}\r\n  }\r\n`;\r\n\r\nconst SolidButton = styled.button`\r\n  align-items: center;\r\n  border: none;\r\n  color: white;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  position: relative;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.orange._600};\r\n      border-radius: ${props.border\r\n        ? props.border.radius\r\n        : props.theme.components.button.outlined.borderRadius};\r\n      box-shadow: ${props.theme.shadows.level1};\r\n      height: ${props.theme.components.button.solid.height};\r\n      padding: ${props.theme.components.button.solid.padding};\r\n      width: ${props.fullWidth ? \"100%\" : \"auto\"};\r\n\r\n      ${marginProperties(props)}\r\n    `}\r\n\r\n  &:hover:enabled {\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${!props.loading && props.theme.colors.orange._800};\r\n        box-shadow: ${!props.loading && props.theme.shadows.level2};\r\n      `}\r\n  }\r\n\r\n  &:active:enabled {\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${!props.loading && props.theme.colors.orange._900};\r\n        box-shadow: ${!props.loading && props.theme.shadows.level3};\r\n      `}\r\n  }\r\n\r\n  &:disabled {\r\n    box-shadow: none;\r\n\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${props.theme.colors.black._400};\r\n      `}\r\n  }\r\n`;\r\n\r\nconst TextButton = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: none;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  position: relative;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-radius: ${props.border\r\n        ? props.border.radius\r\n        : props.theme.components.button.outlined.borderRadius};\r\n      height: ${props.theme.components.button.solid.height};\r\n      padding: ${props.theme.components.button.solid.padding};\r\n      width: ${props.fullWidth ? \"100%\" : \"auto\"};\r\n\r\n      ${marginProperties(props)}\r\n    `}\r\n\r\n  &:hover:enabled {\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${!props.loading && props.theme.colors.black._200};\r\n      `}\r\n  }\r\n\r\n  &:active:enabled {\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${!props.loading && props.theme.colors.black._300};\r\n      `}\r\n  }\r\n\r\n  &:disabled {\r\n    box-shadow: none;\r\n\r\n    ${(props) =>\r\n      css`\r\n        color: ${props.theme.colors.black._400};\r\n      `}\r\n  }\r\n`;\r\n\r\nexport const Styles = {\r\n  OutlinedButton,\r\n  SolidButton,\r\n  TextButton,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import components */\r\nimport { Icon } from \"../../../\";\r\n\r\n/* import styles. */\r\nimport { LoaderWrapper, ContentWrapper } from \"./Wrappers.styles\";\r\nimport { Styles } from \"./Button.styles\";\r\n\r\nexport const Button = (props) => {\r\n  const { children, loading, onClick, ...others } = props;\r\n\r\n  const isIconButton = props.kind === \"icon\";\r\n\r\n  const iconAttributes = {\r\n    //? default values.\r\n    name: null,\r\n    size: \"sm\",\r\n    //? component values.\r\n    ...props.icon,\r\n  };\r\n\r\n  const Button = ({ kind, ...others }) => {\r\n    switch (kind) {\r\n      case \"outlined\":\r\n        return <Styles.OutlinedButton {...others} />;\r\n      case \"solid\":\r\n        return <Styles.SolidButton {...others} />;\r\n      case \"text\":\r\n        return <Styles.TextButton {...others} />;\r\n      default:\r\n        return <Styles.SolidButton {...others} />;\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!loading) {\r\n      onClick && onClick();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button loading={loading ? 1 : 0} onClick={handleClick} {...others}>\r\n      {/* loading view */}\r\n      <LoaderWrapper loading={loading ? 1 : 0} data-testid=\"loading\">\r\n        <Icon color=\"inheret\" icon=\"spinner\" size=\"sm\" />\r\n      </LoaderWrapper>\r\n\r\n      {/* content view */}\r\n      <ContentWrapper loading={loading ? 1 : 0}>\r\n        {iconAttributes.name && (\r\n          <Icon\r\n            color=\"inheret\"\r\n            icon={iconAttributes.name}\r\n            margin={isIconButton ? \"\" : \"r-4\"}\r\n            size={iconAttributes.size}\r\n          />\r\n        )}\r\n\r\n        {children}\r\n      </ContentWrapper>\r\n    </Button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  border: PropTypes.shape({\r\n    radius: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  fullWidth: PropTypes.bool,\r\n  icon: PropTypes.shape({\r\n    name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    size: PropTypes.oneOf([\"input\", \"lg\", \"md\", \"sm\"]),\r\n  }),\r\n  kind: PropTypes.oneOf([\"outlined\", \"solid\", \"text\"]),\r\n  loading: PropTypes.bool,\r\n  margin: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  type: PropTypes.oneOf([\"button\", \"submit\"]),\r\n};\r\n\r\nButton.defaultProps = {\r\n  border: {\r\n    radius: \"4px\",\r\n  },\r\n  children: null,\r\n  disabled: false,\r\n  fullWidth: false,\r\n  icon: null, //? default value insert into javascript code.\r\n  kind: \"solid\",\r\n  loading: false,\r\n  margin: \"a-0\",\r\n  onClick: null,\r\n  type: \"button\",\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled.div`\r\n  border: none;\r\n\r\n  ${(props) => `\r\n    background-color: ${\r\n      typeof props.color === \"object\"\r\n        ? props.theme.colors[props.color.tone][`_${props.color.intensity}`]\r\n        : props.color\r\n    };\r\n    height: ${props.theme.components.divider.height};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtWrapperOptions = [\"margin\", \"color\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import hooks */\r\nimport { useOuterClick } from \"../../../hooks/useOuterClick\";\r\n\r\n/* import styles */\r\nimport { Styles } from \"./Dropdown.styles\";\r\n\r\nexport const Dropdown = (props) => {\r\n  const { children, name, onSelect, ...others } = props;\r\n\r\n  const [optionSelected, setOptionSelected] = useState(null);\r\n  const [showPanel, setShowPanel] = useState(false);\r\n\r\n  const innerRef = useOuterClick(() => {\r\n    if (showPanel) toogleShowPanel();\r\n  });\r\n\r\n  const toogleShowPanel = () => {\r\n    setShowPanel((prev) => !prev);\r\n  };\r\n\r\n  const handleSelect = (value, name) => {\r\n    toogleShowPanel();\r\n\r\n    if (value !== optionSelected) {\r\n      onSelect && onSelect(value, name);\r\n      setOptionSelected(value);\r\n    }\r\n  };\r\n\r\n  const getPanel = React.Children.toArray(children)[1];\r\n  const getToggle = React.Children.toArray(children)[0];\r\n\r\n  return (\r\n    <Styles.DropdownWrapper ref={innerRef} {...others}>\r\n      {React.cloneElement(getToggle, {\r\n        onClick: toogleShowPanel,\r\n        openPanel: showPanel,\r\n      })}\r\n\r\n      {React.cloneElement(getPanel, {\r\n        name,\r\n        onSelect: handleSelect,\r\n        showPanel,\r\n      })}\r\n    </Styles.DropdownWrapper>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n};\r\n\r\nDropdown.defaultProps = {\r\n  children: null,\r\n  name: null,\r\n  onSelect: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ItemWrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      width: ${props.theme.components.dropdown.panelSize.width};\r\n    `}\r\n\r\n  &:hover:not([disabled]) {\r\n    overflow: hiddem;\r\n\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${props.theme.colors.black._200};\r\n      `}\r\n  }\r\n\r\n  &[disabled] {\r\n    cursor: not-allowed;\r\n    filter: opacity(50%);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ItemWrapper } from \"./DropdownItem.styles\";\r\n\r\nexport const DropdownItem = (props) => {\r\n  const { disabled, name, onSelect, value } = props;\r\n\r\n  const handleClick = (e) => {\r\n    if (!disabled) {\r\n      onSelect && onSelect(value, name);\r\n    }\r\n  };\r\n\r\n  return <ItemWrapper onClick={handleClick} {...props} />;\r\n};\r\n\r\nDropdownItem.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  value: PropTypes.any,\r\n};\r\n\r\nDropdownItem.defaultProps = {\r\n  disabled: false,\r\n  name: null,\r\n  onSelect: null,\r\n  value: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const TriangleWrapper = styled.div`\r\n  border-bottom: 10px solid transparent;\r\n  border-top: 10px solid transparent;\r\n  position: absolute;\r\n  top: -5px;\r\n  transform: rotate(-90deg);\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-left: 10px solid ${props.theme.colors.alert.bgColors.neutral};\r\n      ${props.direction === \"right\" && \"left: 10px;\"}\r\n      ${props.direction === \"left\" && \"right: 35px;\"}\r\n    `};\r\n`;\r\n\r\nexport const PanelWrapper = styled.div`\r\n  position: absolute;\r\n  top: 100%;\r\n\r\n  ${(props) =>\r\n    css`\r\n      width: ${props.theme.components.dropdown.panelSize.width};\r\n      ${props.direction === \"right\" && \"left: 0;\"}\r\n      ${props.direction === \"left\" && \"right: 0;\"}\r\n\r\n      display: ${props.showPanel ? \"block\" : \"none\"};\r\n    `};\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import components */\r\nimport { Panel } from \"../../../../../\";\r\n\r\n/* import styles */\r\nimport { PanelWrapper, TriangleWrapper } from \"./DropdownPanel.styles\";\r\n\r\nexport const DropdownPanel = (props) => {\r\n  const { children, direction, name, onSelect, ...others } = props;\r\n\r\n  return (\r\n    <PanelWrapper direction={direction} {...others}>\r\n      <Panel margin=\"t-8\" padding=\"y-4 x-0\">\r\n        <TriangleWrapper direction={direction} />\r\n        {children.map((item, index) => {\r\n          return React.cloneElement(item, {\r\n            key: `listItem-${index + 1}`,\r\n            name,\r\n            onSelect,\r\n          });\r\n        })}\r\n      </Panel>\r\n    </PanelWrapper>\r\n  );\r\n};\r\n\r\nDropdownPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  direction: PropTypes.oneOf([\"left\", \"right\"]),\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  showPanel: PropTypes.bool,\r\n};\r\n\r\nDropdownPanel.defaultProps = {\r\n  children: null,\r\n  direction: \"right\",\r\n  name: null,\r\n  onSelect: null,\r\n  showPanel: false,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ToogleWrapper = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import components */\r\nimport { Icon } from \"../../../../../\";\r\n\r\n/* import  styles */\r\nimport { ContentWrapper, ToogleWrapper } from \"./DropdownToogle.styles\";\r\n\r\nexport const DropdownToogle = (props) => {\r\n  const { children, openPanel, ...others } = props;\r\n\r\n  const icon = openPanel ? \"angle-up\" : \"angle-down\";\r\n\r\n  return (\r\n    <ToogleWrapper {...others}>\r\n      <ContentWrapper>\r\n        {children}\r\n        <Icon icon={icon} margin=\"l-4\" size=\"sm\" />\r\n      </ContentWrapper>\r\n    </ToogleWrapper>\r\n  );\r\n};\r\n\r\nDropdownToogle.propTypes = {\r\n  children: PropTypes.node,\r\n  openPanel: PropTypes.bool,\r\n};\r\n\r\nDropdownToogle.defaultProps = {\r\n  children: null,\r\n  openPanel: false,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst IconItem = styled(FontAwesomeIcon)`\r\n  ${(props) =>\r\n    css`\r\n      font-size: ${props.theme.components.icon.iconSizes[props.customsize]};\r\n      max-height: ${props.theme.components.icon.iconSizes[props.customsize]};\r\n      max-widt: ${props.theme.components.icon.iconSizes[props.customsize]};\r\n    `}\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  align-items: center;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n\r\n  ${(props) =>\r\n    css`\r\n      color: ${typeof props.color === \"object\"\r\n        ? props.theme.colors[props.color.tone][`_${props.color.intensity}`]\r\n        : props.color};\r\n      height: ${props.theme.components.icon.wrapperSizes[props.size]};\r\n      width: ${props.theme.components.icon.wrapperSizes[props.size]};\r\n      ${marginProperties(props)}\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  IconItem,\r\n  IconWrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtWrapperOptions = [\"color\", \"margin\", \"size\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n\r\n/* start - icon filter */\r\nconst whtListIconOptions = [\"icon\", \"spin\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getIconOptionsFilter = (props) => {\r\n  return pick(props, whtListIconOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst IconButton = styled.button`\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  height: 38px;\r\n  justify-content: center;\r\n  width: 38px;\r\n\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n    `}\r\n\r\n  &:hover:enabled {\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${props.theme.colors.black._200};\r\n      `}\r\n  }\r\n\r\n  &:active:enabled {\r\n    ${(props) =>\r\n      css`\r\n        background-color: ${!props.loading && props.theme.colors.black._300};\r\n      `}\r\n  }\r\n\r\n  &:disabled {\r\n    box-shadow: none;\r\n\r\n    ${(props) =>\r\n      css`\r\n        border-color: ${props.theme.colors.black._400};\r\n        color: ${props.theme.colors.black._400};\r\n      `}\r\n  }\r\n`;\r\n\r\nexport const Styles = {\r\n  IconButton,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import components */\r\nimport { Icon } from \"../../..\";\r\n\r\n/* import styles. */\r\nimport { Styles } from \"./IconButton.styles\";\r\n\r\nexport const IconButton = (props) => {\r\n  const { icon, onClick, ...others } = props;\r\n\r\n  const handleClick = () => {\r\n    onClick && onClick();\r\n  };\r\n\r\n  return (\r\n    <Styles.IconButton onClick={handleClick} {...others}>\r\n      <Icon icon={icon.name} size={icon.size} />\r\n    </Styles.IconButton>\r\n  );\r\n};\r\n\r\nIconButton.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.shape({\r\n    name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    size: PropTypes.oneOf([\"input\", \"lg\", \"md\", \"sm\"]),\r\n  }).isRequired,\r\n  margin: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nIconButton.defaultProps = {\r\n  disabled: false,\r\n  icon: null, //? default value insert into javascript code.\r\n  margin: \"a-0\",\r\n  onClick: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst IconPlaceholder = styled.div`\r\n  align-items: center;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.orange._600};\r\n      border-radius: ${props.type === \"round\" ? \"50%\" : \"0\"};\r\n      height: ${props.theme.components.image.height[props.type][props.size]};\r\n      width: ${props.theme.components.image.width[props.type][props.size]};\r\n\r\n      ${marginProperties(props)}\r\n    `};\r\n`;\r\n\r\nexport const Styles = {\r\n  IconPlaceholder,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon, Text } from \"../../../../..\";\r\n\r\nimport { Styles } from \"./ImagePlaceholder.styles\";\r\n\r\nexport const ImagePlaceholder = (props) => {\r\n  const { placeholder, size } = props;\r\n\r\n  const selectTextSize = () => {\r\n    if ([\"avatar\", \"avatarSm\", \"sm\"].includes(size)) {\r\n      return \"md\";\r\n    }\r\n\r\n    return \"lg\";\r\n  };\r\n\r\n  return (\r\n    <Styles.IconPlaceholder {...props}>\r\n      {placeholder ? (\r\n        <Text\r\n          color={{ intensity: \"100\", tone: \"black\" }}\r\n          size={selectTextSize()}\r\n          weight=\"bold\"\r\n        >\r\n          {placeholder.charAt(0).toUpperCase()}\r\n        </Text>\r\n      ) : (\r\n        <Icon\r\n          color={{ intensity: \"100\", tone: \"black\" }}\r\n          icon=\"camera\"\r\n          size={size}\r\n        />\r\n      )}\r\n    </Styles.IconPlaceholder>\r\n  );\r\n};\r\n\r\nImagePlaceholder.propTypes = {\r\n  margin: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.oneOf([\"avatar\", \"avatarSm\", \"lg\", \"md\", \"sm\"]),\r\n};\r\n\r\nImagePlaceholder.defaultProps = {\r\n  margin: \"a-0\",\r\n  placeholder: \"\",\r\n  size: \"md\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst ImageStyles = styled.img`\r\n  display: block;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-radius: ${props.type === \"round\" ? \"50%\" : \"0px\"};\r\n      height: ${props.theme.components.image.height[props.type][props.size]};\r\n      object-fit: cover;\r\n      width: ${props.theme.components.image.width[props.type][props.size]};\r\n\r\n      ${marginProperties(props)}\r\n    `};\r\n`;\r\n\r\nexport const Styles = {\r\n  ImageStyles,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - placeholder filter */\r\nconst whtListImageOptions = [\"alt\", \"margin\", \"size\", \"theme\", \"type\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getImageOptionsFilter = (props) => {\r\n  return pick(props, whtListImageOptions);\r\n};\r\n/* end - placeholder filter */\r\n\r\n/* start - placeholder filter */\r\nconst whtListPlaceholderOptions = [\r\n  \"margin\",\r\n  \"placeholder\",\r\n  \"size\",\r\n  \"theme\",\r\n  \"type\",\r\n];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getPlaceholderOptionsFilter = (props) => {\r\n  return pick(props, whtListPlaceholderOptions);\r\n};\r\n/* end - placeholder filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { ErrorMessage, Field } from \"formik\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst Error = styled(ErrorMessage)`\r\n  ${(props) =>\r\n    css`\r\n      color: ${props.theme.colors.alert.colors.error};\r\n      font-size: ${props.theme.components.text.sizes.sm};\r\n      font-weight: ${props.theme.components.text.weights.regular};\r\n      line-height: ${props.theme.components.text.lineHeight.sm};\r\n    `};\r\n`;\r\n\r\nconst ErrorWrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      height: ${props.theme.components.text.lineHeight.sm};\r\n\r\n      ${marginProperties(props)}\r\n    `};\r\n`;\r\n\r\nconst InputStyles = styled(Field)`\r\n  background-color: transparent;\r\n  border: none;\r\n  flex-grow: 1;\r\n  outline: none;\r\n  padding: 0;\r\n\r\n  ${(props) =>\r\n    css`\r\n      font-size: ${props.theme.components.text.sizes.md};\r\n      font-weight: ${props.theme.components.text.weights.regular};\r\n      height: ${props.theme.components.input.height};\r\n      line-height: ${props.theme.components.text.lineHeight.md};\r\n    `};\r\n`;\r\n\r\nconst InputWrapper = styled.div`\r\n  align-items: center;\r\n  border-style: solid;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  width: 100%;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.input.border.radius};\r\n      border-width: ${props.theme.components.input.border.weight};\r\n\r\n      ${marginProperties(props)}\r\n      ${paddingProperties(props, props.theme.components.input.padding)}\r\n    `};\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n    `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Error,\r\n  ErrorWrapper,\r\n  InputStyles,\r\n  InputWrapper,\r\n  Wrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtListWrapperOptions = [\"margin\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n\r\n/* start - input filter */\r\nconst whtListInputOptions = [\r\n  \"autoComplete\",\r\n  \"autofocus\",\r\n  \"disabled\",\r\n  \"innerRef\",\r\n  \"name\",\r\n  \"onKeyPress\",\r\n  \"placeholder\",\r\n  \"readOnly\",\r\n  \"value\",\r\n];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getInputOptionsFilter = (props) => {\r\n  return pick(props, whtListInputOptions);\r\n};\r\n/* end - input filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../utils/styles/spacing\";\r\n\r\nconst ButtonsWrapper = styled.div`\r\n  text-align: right;\r\n`;\r\n\r\nconst CloseBtnWrapper = styled.div`\r\n  position: absolute;\r\n\r\n  ${(props) =>\r\n    css`\r\n      right: ${props.theme.components.modal.closeButton.position.right};\r\n      top: ${props.theme.components.modal.closeButton.position.top};\r\n    `}\r\n`;\r\n\r\nconst ContentBox = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      padding: ${paddingProperties(props)};\r\n    `}\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  align-items: center;\r\n  backdrop-filter: blur(1px);\r\n  background-color: rgba(0, 0, 0, 0.35); //TODO: agregar color al theme.\r\n  display: flex;\r\n  height: 100vh;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst PanelWrapper = styled.div`\r\n  margin: auto;\r\n  width: 100%;\r\n\r\n  ${(props) =>\r\n    css`\r\n      max-width: ${props.width};\r\n      padding: ${paddingProperties(\r\n        props,\r\n        props.theme.components.modal.panel.padding\r\n      )};\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ButtonsWrapper,\r\n  CloseBtnWrapper,\r\n  ContentBox,\r\n  Overlay,\r\n  PanelWrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import components */\r\nimport { Button, IconButton, Panel } from \"../../../\";\r\n\r\n/* import styles */\r\nimport { Styles } from \"./Modal.styles\";\r\n\r\nexport const Modal = (props) => {\r\n  const { onClose, show } = props;\r\n\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Styles.Overlay>\r\n      <Styles.PanelWrapper width={props.width}>\r\n        <Panel padding=\"a-20\">\r\n          <Styles.CloseBtnWrapper>\r\n            <IconButton icon={{ name: \"times\" }} onClick={onClose} />\r\n          </Styles.CloseBtnWrapper>\r\n\r\n          <Styles.ContentBox padding=\"r-28\">{props.children}</Styles.ContentBox>\r\n\r\n          <Styles.ButtonsWrapper>\r\n            {!props.cancelButton.hide && (\r\n              <Button kind=\"outlined\" onClick={onClose}>\r\n                {props.cancelButton.text}\r\n              </Button>\r\n            )}\r\n\r\n            {!props.confirmButton.hide && (\r\n              <Button margin=\"l-8\" onClick={props.confirmButton.onClick}>\r\n                {props.confirmButton.text}\r\n              </Button>\r\n            )}\r\n          </Styles.ButtonsWrapper>\r\n        </Panel>\r\n      </Styles.PanelWrapper>\r\n    </Styles.Overlay>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  cancelButton: PropTypes.shape({\r\n    hide: PropTypes.bool,\r\n    text: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n  confirmButton: PropTypes.shape({\r\n    hide: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    text: PropTypes.string,\r\n  }),\r\n  onClose: PropTypes.func,\r\n  show: PropTypes.bool,\r\n  width: PropTypes.string,\r\n};\r\n\r\nModal.defaultProps = {\r\n  cancelButton: {\r\n    hide: false,\r\n    text: \"Cancelar\",\r\n  },\r\n  children: null,\r\n  confirmButton: {\r\n    hide: false,\r\n    onClick: null,\r\n    text: \"Continuar\",\r\n  },\r\n  onClose: null,\r\n  show: false,\r\n  width: \"auto\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst ContentWrapper = styled.div`\r\n  flex-grow: 1;\r\n\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n    `}\r\n`;\r\n\r\nconst PanelWrapper = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.alert.bgColors[props.type]};\r\n      border-radius: ${props.theme.components.panel.border.radius};\r\n      box-shadow: ${props.theme.shadows.level2};\r\n      color: ${props.theme.colors.alert.colors[props.type]};\r\n\r\n      &::-webkit-scrollbar {\r\n        width: ${props.theme.components.panel.scroll.width};\r\n      }\r\n\r\n      &::-webkit-scrollbar-track {\r\n        background: ${props.theme.colors.black._200};\r\n      }\r\n\r\n      &::-webkit-scrollbar-thumb {\r\n        background-color: ${props.theme.colors.black._300};\r\n      }\r\n\r\n      ${marginProperties(props)}\r\n      ${paddingProperties(props, props.theme.components.panel.padding)}\r\n    `}\r\n`;\r\n\r\nconst PositionWrapper = styled.div`\r\n  display: flex;\r\n  flex-grow: 1;\r\n\r\n  ${(props) =>\r\n    css`\r\n      align-items: ${props.align};\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ContentWrapper,\r\n  PanelWrapper,\r\n  PositionWrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtListWrapperOptions = [\"margin\", \"padding\", \"style\", \"type\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst BarWrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.orange._600};\r\n      height: ${props.size &&\r\n      props.theme.components.progressBar.height[props.size]};\r\n      width: ${props.porcent ? props.porcent : \"0%\"};\r\n    `}\r\n`;\r\n\r\nconst ProgressBarWrapper = styled.div`\r\n  overflow: hidden;\r\n  width: 100%;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.black._300};\r\n      border-radius: ${props.borderRound &&\r\n      props.theme.components.progressBar.border.radius[props.size]};\r\n\r\n      ${marginProperties(props)}\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  BarWrapper,\r\n  ProgressBarWrapper,\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"../ProgressBar.styles\";\r\n\r\nexport const Bar = (props) => {\r\n  const { onFinish, step, stepTime, steps } = props;\r\n\r\n  const [width, setWidth] = useState(0);\r\n\r\n  const timer = useRef();\r\n\r\n  const animationAddStep = () => {\r\n    if (timer.current) clearTimeout(timer.current);\r\n\r\n    timer.current = setTimeout(() => {\r\n      setWidth((previusWidth) => previusWidth + 1);\r\n    }, stepTime);\r\n  };\r\n\r\n  const animationSubtractStep = () => {\r\n    if (timer.current) clearTimeout(timer.current);\r\n\r\n    timer.current = setTimeout(() => {\r\n      setWidth((previusWidth) => previusWidth - 1);\r\n    }, stepTime);\r\n  };\r\n\r\n  //? clear timer when unmounted component.\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timer.current) clearTimeout(timer.current);\r\n    };\r\n  }, []);\r\n\r\n  //? animation controller.\r\n  useEffect(() => {\r\n    const finishWidth = Math.floor((step * 100) / steps);\r\n\r\n    if (props.noShowAnimationOnFirstLoad) {\r\n      setWidth(finishWidth);\r\n    } else {\r\n      if (finishWidth > width) {\r\n        animationAddStep();\r\n      } else if (finishWidth < width) {\r\n        animationSubtractStep();\r\n      }\r\n    }\r\n\r\n    if (finishWidth === width) {\r\n      onFinish && onFinish();\r\n    }\r\n  }, [step, steps, width]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const porcentString = () => {\r\n    let porcent = width;\r\n\r\n    if (porcent <= 0) porcent = 0;\r\n    if (porcent > 100) porcent = 100;\r\n\r\n    return `${porcent}%`;\r\n  };\r\n\r\n  return <Styles.BarWrapper size={props.size} porcent={porcentString()} />;\r\n};\r\n\r\nBar.propTypes = {\r\n  noShowAnimationOnFirstLoad: PropTypes.bool,\r\n  onFinish: PropTypes.func,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  step: PropTypes.number,\r\n  stepTime: PropTypes.number,\r\n  steps: PropTypes.number,\r\n};\r\n\r\nBar.defaultProps = {\r\n  noShowAnimationOnFirstLoad: false,\r\n  onFinish: null,\r\n  size: \"md\",\r\n  step: 0,\r\n  stepTime: 10,\r\n  steps: 0,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst SelectPanel = styled.div`\r\n  border-style: solid;\r\n  box-sizing: border-box;\r\n  overflow: auto;\r\n  position: absolute;\r\n  z-index: 50;\r\n  width: 100%;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.black._100};\r\n      border-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.select.border.radius};\r\n      border-width: ${props.theme.components.select.border.width};\r\n      margin-top: ${props.theme.components.select.panel.margin.top};\r\n      max-height: ${props.maxHeight};\r\n      padding: ${props.theme.components.select.panel.padding};\r\n      top: ${props.theme.components.select.height};\r\n\r\n      &::-webkit-scrollbar {\r\n        width: ${props.theme.components.select.scroll.width};\r\n      }\r\n\r\n      &::-webkit-scrollbar-track {\r\n        background: ${props.theme.colors.black._200};\r\n      }\r\n\r\n      &::-webkit-scrollbar-thumb {\r\n        background-color: ${props.theme.colors.black._300};\r\n      }\r\n    `};\r\n`;\r\n\r\nconst SelectedOption = styled.div`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst SelectedOptionWrapper = styled.div`\r\n  align-items: center;\r\n  border-style: solid;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  width: 100%;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.theme.colors.black._100};\r\n      border-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.select.border.radius};\r\n      border-width: ${props.theme.components.select.border.width};\r\n      height: ${props.theme.components.select.height};\r\n      opacity: ${props.disabled && \"0.5\"}\r\n    `};\r\n`;\r\n\r\nconst SelectWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Styles = {\r\n  SelectPanel,\r\n  SelectedOption,\r\n  SelectedOptionWrapper,\r\n  SelectWrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - select content filter */\r\nconst whtListContentOptions = [\"disabled\", \"maxHeight\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getContentOptionsFilter = (props) => {\r\n  return pick(props, whtListContentOptions);\r\n};\r\n/* end - select content filter */\r\n\r\n/* start - select content panel filter */\r\nconst whtListPanelOptions = [\"maxHeight\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getPanelOptionsFilter = (props) => {\r\n  return pick(props, whtListPanelOptions);\r\n};\r\n/* end - select content panel filter */\r\n\r\n/* start - wrapper filter */\r\nconst whtListWrapperOptions = [\"margin\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst SelectOption = styled.div`\r\n  cursor: pointer;\r\n  padding: 4px 8px;\r\n\r\n  ${(props) =>\r\n    css`\r\n      &:hover {\r\n        background-color: ${props.theme.colors.black._200};\r\n      }\r\n    `};\r\n`;\r\n\r\nexport const Styles = {\r\n  SelectOption,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* context */\r\nimport { SelectContext } from \"../../SelectContext\";\r\n\r\n/* styles */\r\nimport { Styles } from \"./SelectOption.styles\";\r\n\r\nexport const SelectOption = (props) => {\r\n  const { value } = props;\r\n\r\n  const ctx = useContext(SelectContext);\r\n\r\n  const handleClick = () => {\r\n    ctx.setSelectedValue(value);\r\n    ctx.closeSelect();\r\n  };\r\n\r\n  return (\r\n    <Styles.SelectOption onClick={handleClick}>\r\n      {props.children}\r\n    </Styles.SelectOption>\r\n  );\r\n};\r\n\r\nSelectOption.propTypes = {\r\n  children: PropTypes.node,\r\n  value: PropTypes.string,\r\n};\r\n\r\nSelectOption.defaultProps = {\r\n  children: null,\r\n  value: \"\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n    `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n/* context */\r\nimport { SelectContext } from \"../../SelectContext\";\r\n\r\n/* external components */\r\nimport { Field, useFormikContext } from \"formik\";\r\n\r\nexport const SelectValue = (props) => {\r\n  const { name } = props;\r\n\r\n  const ctx = useContext(SelectContext);\r\n\r\n  const { setFieldValue } = useFormikContext();\r\n\r\n  useEffect(() => {\r\n    setFieldValue(name, ctx.selectedValue);\r\n  }, [ctx.selectedValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return <Field name={name} type=\"hidden\" />;\r\n};\r\n\r\nSelectValue.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nSelectValue.defaultProps = {\r\n  name: \"\",\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst Column = styled.div`\r\n  ${(props) => `\r\n    width: ${props.width};\r\n  `}\r\n`;\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  border-bottom-style: solid;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  width: 100%;\r\n\r\n  ${(props) => `\r\n    border-bottom-color: ${props.theme.colors.black._400};\r\n    border-bottom-width: ${props.theme.components.table.row.borderBottom.width};\r\n    cursor: ${!props.isHeader ? \"pointer\" : \"default\"};\r\n    padding: ${props.theme.components.table.row.padding};\r\n\r\n    &:hover {\r\n      background-color: ${\r\n        !props.isHeader ? props.theme.colors.black._200 : \"transparent\"\r\n      };\r\n    }\r\n\r\n    &:hover&:active {\r\n      background-color: ${\r\n        !props.isHeader ? props.theme.colors.black._300 : \"transparent\"\r\n      };\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Column,\r\n  Row,\r\n  Wrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtListWrapperOptions = [\"margin\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst Column = styled.div`\r\n  ${(props) => `\r\n    display: ${props.mobile?.inline ? \"inline-block\" : \"block\"};\r\n    width: ${props.mobile?.width ? props.mobile.width : \"100%\"};\r\n  `};\r\n`;\r\n\r\nconst Row = styled.div`\r\n  border-bottom-style: solid;\r\n  box-sizing: content-box;\r\n\r\n  ${(props) => `\r\n    border-bottom-color: ${props.theme.colors.black._400};\r\n    border-bottom-width: ${props.theme.components.table.row.borderBottom.width};\r\n    cursor: ${!props.isHeader ? \"pointer\" : \"default\"};\r\n    padding: ${props.theme.components.table.row.padding};\r\n\r\n    &:hover {\r\n      background-color: ${\r\n        !props.isHeader ? props.theme.colors.black._200 : \"transparent\"\r\n      };\r\n    }\r\n\r\n    &:hover&:active {\r\n      background-color: ${\r\n        !props.isHeader ? props.theme.colors.black._300 : \"transparent\"\r\n      };\r\n    }\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Column,\r\n  Row,\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n/* components */\r\nimport { Text } from \"../../..\";\r\n\r\n/* styles */\r\nimport { Styles } from \"./PhoneTable.styles\";\r\n\r\n/* utils */\r\nimport { getWrapperOptionsFilter } from \"../../utils/propsFilter\";\r\n\r\nexport const PhoneTable = (props) => {\r\n  const { columns, data, mobileColumns, onClick } = props;\r\n\r\n  const wrapperOptions = getWrapperOptionsFilter(props);\r\n\r\n  const list =\r\n    mobileColumns.length > 0 ? mobileColumns : columns.length ? columns : [];\r\n\r\n  return (\r\n    <Styles.Wrapper {...wrapperOptions}>\r\n      {data.map((row, idx) => (\r\n        <Styles.Row\r\n          idx={idx}\r\n          key={`table-row-${idx}`}\r\n          onClick={() => onClick && onClick(row)}\r\n        >\r\n          {list.map((column, idx) => (\r\n            <Styles.Column key={`column-title-${idx}`} mobile={column.mobile}>\r\n              <Text weight=\"semibold\">{column.label}</Text>\r\n\r\n              {column.content(row)}\r\n            </Styles.Column>\r\n          ))}\r\n        </Styles.Row>\r\n      ))}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nPhoneTable.propTypes = {\r\n  columns: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.string,\r\n  mobileColumns: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nPhoneTable.defaultProps = {\r\n  columns: [],\r\n  data: [],\r\n  margin: \"a-0\",\r\n  mobileColumns: [],\r\n  onClick: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst TabsBar = styled.div`\r\n  border-bottom-style: solid;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-bottom-color: ${props.theme.colors.black._200};\r\n      border-bottom-width: ${props.theme.components.tabs.bar.border.width};\r\n\r\n      ${paddingProperties(props, props.theme.components.tabs.bar.padding)}\r\n    `};\r\n`;\r\n\r\nconst TabButton = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\n  border-bottom-style: solid;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-bottom-color: ${props.isSelected\r\n        ? props.theme.colors.orange._600\r\n        : \"transparent\"};\r\n      border-bottom-width: ${props.theme.components.tabs.button.border.width};\r\n\r\n      ${paddingProperties(props, props.theme.components.tabs.button.padding)}\r\n\r\n      &:hover {\r\n        border-bottom-color: ${props.theme.colors.orange._300};\r\n      }\r\n    `};\r\n`;\r\n\r\nconst TabContent = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      ${paddingProperties(props, props.theme.components.tabs.content.padding)}\r\n    `};\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n      ${paddingProperties(props)}\r\n    `};\r\n`;\r\n\r\nexport const Styles = {\r\n  TabsBar,\r\n  TabButton,\r\n  TabContent,\r\n  Wrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtListWrapperOptions = [\"margin\", \"padding\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst textStyles = (props) => {\r\n  return css`\r\n    color: ${typeof props.color === \"object\"\r\n      ? props.theme.colors[props.color.tone][`_${props.color.intensity}`]\r\n      : props.color};\r\n    font-family: \"Roboto\", sans-serif;\r\n    font-size: ${props.theme.components[props.type].sizes[props.size]};\r\n    font-weight: ${props.theme.components[props.type].weights[props.weight]};\r\n    line-height: ${props.theme.components[props.type].lineHeight[props.size]};\r\n    text-align: ${props.align};\r\n    text-decoration: ${props.decoration};\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props)}\r\n  `;\r\n};\r\n\r\nconst TextWrapper = styled.p`\r\n  ${(props) => textStyles(props)};\r\n`;\r\n\r\nconst LabelWrapper = styled.label`\r\n  display: inline-block;\r\n  ${(props) => textStyles(props)};\r\n`;\r\n\r\nexport const Styles = {\r\n  LabelWrapper,\r\n  TextWrapper,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\n/* import utils  */\r\nimport { marginProperties } from \"../../../utils/styles/spacing\";\r\n\r\nexport const Wrapper = styled.div`\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n    `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\n/* import utils  */\r\nimport { marginProperties } from \"../../../utils/styles/spacing\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n\r\n  ${(props) =>\r\n    css`\r\n      grid-template-columns: repeat(${props.children.length}, 1fr);\r\n      grid-column-gap: ${props.gap};\r\n      grid-row-gap: ${props.gap};\r\n\r\n      ${marginProperties(props)}\r\n\r\n      @media only screen and (max-width: ${props.minWidth}) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n      }\r\n    `}\r\n`;\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - barOptions filter */\r\nconst whtListColumnsOptions = [\"gap\", \"margin\", \"minWidth\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListColumnsOptions);\r\n};\r\n/* end - barOptions filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n\r\n  ${(props) =>\r\n    css`\r\n      align-items: ${props.vAlign};\r\n      justify-content: ${props.hAlign};\r\n\r\n      ${marginProperties(props)}\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import { pick } from \"../../../../utils/objects/object\";\r\n\r\n/* start - wrapper filter */\r\nconst whtListWrapperOptions = [\"hAlign\", \"margin\", \"vAlign\"];\r\n\r\n/**\r\n * @param {object} props component properties.\r\n * @return {object} filtered props.\r\n */\r\nexport const getWrapperOptionsFilter = (props) => {\r\n  return pick(props, whtListWrapperOptions);\r\n};\r\n/* end - wrapper filter */\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../../../utils/styles\";\r\n\r\nexport const Wrapper = styled.div`\r\n  align-items: center;\r\n  border-radius: 0 0 5px 5px;\r\n  display: flex;\r\n  left: 50%;\r\n  position: absolute;\r\n  top: 100%;\r\n\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.alert.bgColors.warning};\r\n    box-shadow: ${props.theme.shadows.level2};\r\n    color: ${props.theme.colors.alert.colors.warning};\r\n    ${paddingProperties(props, \"x-10 y-5\")}\r\n  `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../../../utils/styles\";\r\n\r\nconst BottomContentStyles = styled.div`\r\n  border-top-style: solid;\r\n\r\n  ${(props) => css`\r\n    border-top-color: ${props.theme.colors.black._200};\r\n    border-top-width: ${props.theme.components.appLayout.sidebar.border.width};\r\n\r\n    ${paddingProperties(\r\n      props,\r\n      props.theme.components.appLayout.sidebar.bottomContent.padding\r\n    )}\r\n  `}\r\n`;\r\n\r\nconst SideBarButton = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n\r\n  ${(props) => css`\r\n    color: ${props.isSelectedSection\r\n      ? props.theme.colors.orange._600\r\n      : \"inheret\"};\r\n\r\n    width: ${props.isExpanded\r\n      ? props.theme.components.appLayout.sidebar.width.expanded\r\n      : props.theme.components.appLayout.sidebar.width.contracted};\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    ${paddingProperties(\r\n      props,\r\n      props.theme.components.appLayout.sidebar.button.padding\r\n    )}\r\n  `}\r\n`;\r\n\r\nconst SideBarButtonsWrapper = styled.div`\r\n  overflow-y: auto;\r\n\r\n  ${(props) => css`\r\n    height: calc(100% - ${props.theme.components.appLayout.sidebar.content.height});\r\n    \r\n    &::-webkit-scrollbar {\r\n      width: ${props.theme.components.appLayout.scroll.width};\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.appLayout.scroll.radious});\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SideBarStyles = styled.div`\r\n  border-right-style: solid;\r\n  height: 100%;\r\n  position: relative;\r\n\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-right-color: ${props.theme.colors.black._200};\r\n    border-right-width: ${props.theme.components.appLayout.sidebar.border\r\n      .width};\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  BottomContentStyles,\r\n  SideBarButton,\r\n  SideBarButtonsWrapper,\r\n  SideBarStyles,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import hooks */\r\nimport { useRouter } from \"../../../../../hooks/useRouter\";\r\n\r\n/* import components */\r\nimport { Icon, Text } from \"../../../../../\";\r\n\r\n/* import styles */\r\nimport { Styles } from \"./SideBar.styles\";\r\n\r\nexport const SideBar = (props) => {\r\n  const { buttons } = props;\r\n\r\n  const router = useRouter();\r\n\r\n  const [isExpanded, setIsExpanded] = useState(true);\r\n\r\n  const contractedButton = {\r\n    icon: isExpanded ? \"angles-left\" : \"angles-right\",\r\n    label: \"Contraer\",\r\n  };\r\n\r\n  const handleClick = () => setIsExpanded((prev) => !prev);\r\n\r\n  const handleSidebarButtonClick = (to) => {\r\n    router.push(to);\r\n  };\r\n\r\n  const renderButtonContent = (btn, isSelected) => {\r\n    return (\r\n      <>\r\n        <Icon icon={btn.icon} margin=\"r-8\" size=\"sm\" />\r\n\r\n        {isExpanded && (\r\n          <Text\r\n            color={\r\n              isSelected\r\n                ? { intensity: \"600\", tone: \"orange\" }\r\n                : { intensity: \"900\", tone: \"black\" }\r\n            }\r\n            weight=\"semibold\"\r\n          >\r\n            {btn.label}\r\n          </Text>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Styles.SideBarStyles>\r\n      {/* button list */}\r\n      <Styles.SideBarButtonsWrapper>\r\n        {buttons &&\r\n          buttons.map((btn, idx) => {\r\n            const isSelected = router.location.pathname.includes(btn.to);\r\n\r\n            return (\r\n              <Styles.SideBarButton\r\n                isExpanded={isExpanded}\r\n                isSelectedSection={isSelected}\r\n                key={`sidebar-button-${idx}`}\r\n                onClick={() => handleSidebarButtonClick(btn.to)}\r\n              >\r\n                {renderButtonContent(btn, isSelected)}\r\n              </Styles.SideBarButton>\r\n            );\r\n          })}\r\n      </Styles.SideBarButtonsWrapper>\r\n\r\n      <Styles.BottomContentStyles>\r\n        <Styles.SideBarButton isExpanded={isExpanded} onClick={handleClick}>\r\n          {renderButtonContent(contractedButton)}\r\n        </Styles.SideBarButton>\r\n      </Styles.BottomContentStyles>\r\n    </Styles.SideBarStyles>\r\n  );\r\n};\r\n\r\nSideBar.propTypes = {\r\n  buttons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      to: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nSideBar.defaultProps = {\r\n  buttons: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../utils/styles\";\r\n\r\nexport const ContentBox = styled.div`\r\n  box-sizing: border-box;\r\n  flex-grow: 1;\r\n  height: 100%;\r\n  overflow: auto;\r\n\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    width: calc(100vw - ${\r\n      props.isExpanded\r\n        ? props.theme.components.appLayout.sidebar.width.expanded\r\n        : props.theme.components.appLayout.sidebar.width.contracted\r\n    });\r\n\r\n    &::-webkit-scrollbar {\r\n      width: ${props.theme.components.appLayout.scroll.width};\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.appLayout.scroll.radious});\r\n    }\r\n\r\n    ${paddingProperties(\r\n      props,\r\n      props.theme.components.appLayout.content.padding\r\n    )}\r\n  `}\r\n`;\r\n\r\nexport const MainContent = styled.div`\r\n  display: flex;\r\n  width: 100vw;\r\n\r\n  ${(props) => css`\r\n    height: calc(100vh - ${props.theme.components.appLayout.topbar.height});\r\n  `}\r\n`;\r\n\r\nexport const TopBar = styled.div`\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  width: 100vw;\r\n\r\n  ${(props) => css`\r\n    color: ${props.theme.colors.black._100};\r\n    background-color: ${props.theme.colors.black._700};\r\n    box-shadow: ${props.theme.shadows.level3};\r\n    height: ${props.theme.components.appLayout.topbar.height};\r\n    z-index: 100;\r\n\r\n    ${paddingProperties(props)}\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import components */\r\nimport { OfflineBadge } from \"./components/OfflineBadge/OfflineBadge\";\r\nimport { SideBar } from \"./components/SideBar/SideBar\";\r\n\r\n/* import styles */\r\nimport { ContentBox, MainContent, TopBar } from \"./AppLayout.styles\";\r\n\r\nexport const AppLayout = (props) => {\r\n  const { sidebar, topbar } = props;\r\n\r\n  const sidebarButtons = sidebar ? sidebar.buttons : null;\r\n\r\n  return (\r\n    <>\r\n      <TopBar padding=\"x-24 y-8\">\r\n        {topbar ? topbar.content : null}\r\n\r\n        <OfflineBadge />\r\n      </TopBar>\r\n\r\n      <MainContent>\r\n        <SideBar buttons={sidebarButtons} />\r\n\r\n        <ContentBox>{props.children}</ContentBox>\r\n      </MainContent>\r\n    </>\r\n  );\r\n};\r\n\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node,\r\n  sidebar: PropTypes.shape({\r\n    buttons: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\r\n          .isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        to: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n  }),\r\n  topbar: PropTypes.shape({\r\n    content: PropTypes.node,\r\n  }),\r\n};\r\n\r\nAppLayout.defaultProps = {\r\n  children: null,\r\n  sidebar: null,\r\n  topbar: null,\r\n};\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Button } from \"../../../../atoms\";\r\n\r\nimport { Styles } from \"./PaginateButton.styles\";\r\n\r\nexport const PaginateButton = (props) => {\r\n  const { children, kind, onClick } = props;\r\n\r\n  return (\r\n    <Styles.Wrapper>\r\n      <Button fullWidth kind={kind} onClick={onClick}>\r\n        {children}\r\n      </Button>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nPaginateButton.propTypes = {\r\n  children: PropTypes.node,\r\n  kind: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nPaginateButton.defaultProps = {\r\n  children: 0,\r\n  kind: \"outlined\",\r\n  onClick: null,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nexport const Wrapper = styled.div`\r\n  align-items: end;\r\n  display: flex;\r\n  justify-content: start;\r\n\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst ButtonsContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst ContentContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 0 10px;\r\n\r\n  ${(props) =>\r\n    css`\r\n      border-bottom: ${props.isLastItem\r\n        ? \"none\"\r\n        : `solid 1px ${props.theme.colors.black._300}`};\r\n      padding: ${props.isFirstItem ? \"0 0 10px 0\" : \"10px 0\"};\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ButtonsContainer,\r\n  ContentContainer,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import context */\r\nimport { RulesPanelContext } from \"../../RulesPanelContext\";\r\n\r\n/* import components */\r\nimport { IconButton, Panel } from \"../../../../../\";\r\n\r\n/* import styles */\r\nimport { Styles } from \"./RightPanel.styles\";\r\n\r\n/* import constants */\r\nimport { INVALID_INDEX } from \"../../../../../assets/constants/array\";\r\n\r\nexport const RightPanel = (props) => {\r\n  const { list, listElement, onChange, panelLeftHeight } = props;\r\n\r\n  const ctx = useContext(RulesPanelContext);\r\n\r\n  const onClickEdit = (idx) => {\r\n    ctx.setSelectedElement(idx);\r\n  };\r\n\r\n  const onClickDelete = (idx) => {\r\n    list.splice(idx, 1);\r\n    onChange && onChange(list);\r\n  };\r\n\r\n  const renderList = () => {\r\n    if (list) {\r\n      return list.map((el, idx) => {\r\n        const isFirstItem = idx === 0;\r\n        const isLastItem = idx === list.length - 1;\r\n\r\n        return (\r\n          <Styles.ContentContainer\r\n            isFirstItem={isFirstItem}\r\n            isLastItem={isLastItem}\r\n            key={`rightPanel-listItem-${idx}`}\r\n          >\r\n            <div>{listElement && listElement(el.data)}</div>\r\n\r\n            <Styles.ButtonsContainer>\r\n              {el.isEditable && (\r\n                <IconButton\r\n                  disabled={ctx.selectedElement !== INVALID_INDEX}\r\n                  icon={{ name: \"pencil\" }}\r\n                  onClick={() => onClickEdit(idx)}\r\n                />\r\n              )}\r\n\r\n              {el.isRemovable && (\r\n                <IconButton\r\n                  disabled={ctx.selectedElement === idx}\r\n                  icon={{ name: \"trash\" }}\r\n                  onClick={() => onClickDelete(idx)}\r\n                />\r\n              )}\r\n            </Styles.ButtonsContainer>\r\n          </Styles.ContentContainer>\r\n        );\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Panel\r\n      padding=\"a-16\"\r\n      style={{\r\n        boxSizing: \"border-box\",\r\n        height: panelLeftHeight === -1 ? \"auto\" : `${panelLeftHeight}px`,\r\n        overflowY: \"scroll\",\r\n      }}\r\n    >\r\n      {renderList()}\r\n    </Panel>\r\n  );\r\n};\r\n\r\nRightPanel.propTypes = {\r\n  list: PropTypes.array,\r\n  listElement: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  panelLeftHeight: PropTypes.number,\r\n};\r\n\r\nRightPanel.defaultProps = {\r\n  list: [],\r\n  listElement: null,\r\n  onChange: null,\r\n  panelLeftHeight: -1,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles/spacing\";\r\n\r\nconst ButtonsGroup = styled.div`\r\n  text-align: end;\r\n\r\n  ${(props) =>\r\n    css`\r\n      ${marginProperties(props)}\r\n    `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ButtonsGroup,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* import context */\r\nimport { RulesPanelContext } from \"../../RulesPanelContext\";\r\n\r\n/* import components */\r\nimport { FieldsGroup } from \"../FieldsGroup/FieldsGroup\";\r\nimport { Button, Panel } from \"../../../../../\";\r\n\r\n/* import external components */\r\nimport { Form, Formik } from \"formik\";\r\n\r\n/* styles */\r\nimport { Styles } from \"./LeftPanel.styles\";\r\n\r\n/* import constants */\r\nimport { INVALID_INDEX } from \"../../../../../assets/constants/array\";\r\n\r\nexport const LeftPanel = (props) => {\r\n  const { fields, list, onChange, onSizeH, validationSchema } = props;\r\n\r\n  const ctx = useContext(RulesPanelContext);\r\n\r\n  const onSubmit = (values) => {\r\n    if (ctx.selectedElement === INVALID_INDEX) {\r\n      //? add element.\r\n      const newItem = {\r\n        data: values,\r\n        isEditable: true,\r\n        isRemovable: true,\r\n      };\r\n\r\n      list.push(newItem);\r\n    } else {\r\n      //? edit element.\r\n      list[ctx.selectedElement].data = values;\r\n      ctx.setSelectedElement(INVALID_INDEX);\r\n    }\r\n\r\n    onChange && onChange(list);\r\n  };\r\n\r\n  const generateInicialValues = () => {\r\n    const initialValues = {};\r\n\r\n    fields.forEach((field) => {\r\n      const { name } = field;\r\n\r\n      if (ctx.selectedElement === INVALID_INDEX) {\r\n        initialValues[name] = \"\";\r\n      } else {\r\n        initialValues[name] = list[ctx.selectedElement].data[name];\r\n      }\r\n    });\r\n\r\n    return initialValues;\r\n  };\r\n\r\n  const handleHeight = (height) => {\r\n    onSizeH && onSizeH(height);\r\n  };\r\n\r\n  return (\r\n    <Panel onSizeH={handleHeight} padding=\"a-16\">\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={generateInicialValues()}\r\n        onSubmit={onSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        <Form>\r\n          <FieldsGroup fields={fields} />\r\n\r\n          <Styles.ButtonsGroup margin=\"t-20\">\r\n            <Button\r\n              disabled={ctx.selectedElement === INVALID_INDEX}\r\n              kind=\"outlined\"\r\n              margin=\"r-8\"\r\n              onClick={() => ctx.setSelectedElement(INVALID_INDEX)}\r\n            >\r\n              Cancelar\r\n            </Button>\r\n\r\n            <Button type=\"submit\">\r\n              {ctx.selectedElement === INVALID_INDEX ? \"Agregar\" : \"Editar\"}\r\n            </Button>\r\n          </Styles.ButtonsGroup>\r\n        </Form>\r\n      </Formik>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nLeftPanel.propTypes = {\r\n  fields: PropTypes.array,\r\n  list: PropTypes.array,\r\n  onChange: PropTypes.func,\r\n  onSizeH: PropTypes.func,\r\n  validationSchema: PropTypes.object,\r\n};\r\n\r\nLeftPanel.defaultProps = {\r\n  fields: [],\r\n  list: [],\r\n  onChange: null,\r\n  onSizeH: null,\r\n  validationSchema: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst getColor = (theme, type) => {\r\n  switch (type) {\r\n    case \"pendingCircle\":\r\n      return theme.colors.black._300;\r\n    case \"checkedCircle\":\r\n    case \"circle\":\r\n    default:\r\n      return theme.colors.orange._600;\r\n  }\r\n};\r\n\r\nconst getBgColor = (theme, type) => {\r\n  switch (type) {\r\n    case \"pendingCircle\":\r\n      return theme.colors.black._300;\r\n    case \"circle\":\r\n      return \"none\";\r\n    case \"checkedCircle\":\r\n    default:\r\n      return theme.colors.orange._600;\r\n  }\r\n};\r\n\r\nexport const Circle = styled.div`\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${getBgColor(props.theme, props.type)};\r\n      border: 3px solid ${getColor(props.theme, props.type)};\r\n      color: ${props.theme.colors.black._100};\r\n      height: ${props.theme.components.stepsBar.circle.diameter[props.size]};\r\n      width: ${props.theme.components.stepsBar.circle.diameter[props.size]};\r\n    `}\r\n`;\r\n\r\nexport const ProgressBarWrapper = styled.div`\r\n  flex-grow: 1;\r\n  padding: 0px 10px;\r\n`;\r\n\r\nexport const StepsWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin: 0px 60px;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/*  import components */\r\nimport { Icon, ProgressBar } from \"../../../\";\r\n\r\n/* import styles */\r\nimport { Circle, ProgressBarWrapper, StepsWrapper } from \"./StepsBar.styles\";\r\n\r\nexport const StepsBar = (props) => {\r\n  const { size, step, steps } = props;\r\n\r\n  const [previousStep, setPreviousStep] = useState(step);\r\n\r\n  const finishStepChange = () => {\r\n    const diff = step - previousStep;\r\n\r\n    if (diff > 0) {\r\n      setPreviousStep((prev) => prev + 1);\r\n    } else if (diff < 0) {\r\n      setPreviousStep((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  const selectTypeCircle = (renderStep) => {\r\n    if (renderStep < step) return \"checkedCircle\";\r\n    if (renderStep > step) return \"pendingCircle\";\r\n\r\n    if (renderStep === step && previousStep > step) return \"checkedCircle\";\r\n    if (renderStep === step && previousStep < step) return \"pendingCircle\";\r\n    if (renderStep === step) return \"circle\";\r\n  };\r\n\r\n  const noShowOldAnaimation = (renderStep) => {\r\n    const diff = step - previousStep;\r\n\r\n    const prueba = !(\r\n      (diff > 0 && renderStep === step) ||\r\n      (diff < 0 && renderStep === step + 1)\r\n    );\r\n\r\n    return prueba;\r\n  };\r\n\r\n  const renderIconInsideCircle = (renderStep) => {\r\n    if (renderStep < step || (renderStep === step && previousStep > step)) {\r\n      return <Icon icon=\"check\" size=\"sm\" />;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const renderStep = (renderStep) => {\r\n    return (\r\n      <>\r\n        {renderStep !== 1 && (\r\n          <ProgressBarWrapper key={`progressBar-step-${renderStep}`}>\r\n            <ProgressBar\r\n              borderRound\r\n              noShowAnimationOnFirstLoad={noShowOldAnaimation(renderStep)}\r\n              onFinish={finishStepChange}\r\n              size=\"sm\"\r\n              step={renderStep <= step ? 100 : 0}\r\n              style={{ flexGrow: \"1\" }}\r\n            />\r\n          </ProgressBarWrapper>\r\n        )}\r\n\r\n        <Circle\r\n          key={`circle-step-${renderStep}`}\r\n          size={size}\r\n          type={selectTypeCircle(renderStep)}\r\n        >\r\n          {renderIconInsideCircle(renderStep)}\r\n        </Circle>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderColumnSteps = () => {\r\n    let stepsArray = [];\r\n\r\n    for (let i = 1; i <= steps; i++) {\r\n      stepsArray.push(renderStep(i));\r\n    }\r\n\r\n    return <StepsWrapper>{stepsArray}</StepsWrapper>;\r\n  };\r\n\r\n  return renderColumnSteps();\r\n};\r\n\r\nStepsBar.propTypes = {\r\n  size: PropTypes.oneOf([\"md\"]),\r\n  steps: PropTypes.number.isRequired,\r\n  step: PropTypes.number,\r\n};\r\n\r\nStepsBar.defaultProps = {\r\n  size: \"md\",\r\n  steps: 5,\r\n  step: 1,\r\n};\r\n"],"names":[],"sourceRoot":""}