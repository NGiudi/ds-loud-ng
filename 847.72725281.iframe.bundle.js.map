{"version":3,"file":"847.72725281.iframe.bundle.js","mappings":";AAKA;AACA;;;AAKA;;;;AAIA;;;AA2BA;AArBA;;AAEA;;;AAGA;;AAiBA;AAZA;;;;;AAKA;;;AC3BA;;AAEA;AACA;;AAEA;AACA;;ACRA;;;ACgIA;AA5HA;AA8HA;AAtHA;AACA;;;;AAIA;;;;;AAkHA;AA1GA;;;AAGA;AACA;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;AA6EA;AAvEA;;AAEA;;AAEA;AAGA;;;AAGA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AA2CA;AApCA;;;;AAIA;;AAIA;;AAEA;;AAEA;;AAEA;;;AAGA;;;;AAIA;;;;;AAKA;;;AC3HA;ACAA;ACAA;ACFA;ACAA;;;ACGA;ACLA;AACA;;;AAGA;;;;;;;;;ACFA;ACFA;;AAEA;;;;;;AAMA;AACA;;AAIA;AACA;AACA;;;AAGA;;AAEA;AACA;;ACjBA;;ACDA;;;ACCA;ACAA;AACA;AACA;AACA;;AAmBA;AAdA;;AAEA;;AAEA;;AAEA;;AAEA;;AClBA;ACAA;;;;;;;;;;AAUA;;;AAGA;;;;AAIA;;;;AAIA;;AAEA;;;ACrBA;ACFA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;ACPA;ACFA;AACA;;AAEA;;AAEA;;AAEA;;ACLA;ACAA;AACA;AACA;AACA;AACA;;AAkDA;AA7CA;AACA;;AAEA;;AA2CA;AAtCA;;;;AAIA;AACA;AACA;AACA;;;;AAgCA;AAzBA;;AAEA;AACA;;AAEA;;;;;AAKA;AACA;;AAeA;AAVA;AACA;;AC/CA;;ACwCA;AAvCA;;AAEA;AACA;;AAqCA;AAhCA;AACA;;AAgCA;;;;;;;;;;AACA;AAhBA;;AAEA;AACA;;;AC/BA;ACFA;;;AAGA;;AAwCA;AAnCA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;AAgBA;AAVA;AACA;;;;ACtCA;ACGA;AACA;AACA;AAEA;;AAkBA;AAbA;AACA;AACA;;;;AAKA;;AChBA;ACFA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;;;AAKA;;;;AAIA;;;;AAIA;;;AAgCA;;AACA;AAvBA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;;AAcA;;;ACnDA;ACRA;;;;;AAKA;;;ACDA;ACFA;AACA;;ACKA;ACNA;AAuCA;AAjCA;AAkCA;AARA;AC9BA;ACFA;AAgCA;AAzBA;AA0BA;AARA;ACvBA;ACFA;AACA;;AAEA;;AAEA;;AAqCA;AAhCA;;;AAGA;;AAIA;;AAEA;;;AAGA;;;AAqBA;AAfA;AACA;;AAeA;AAVA;AACA;AACA;;AClCA;ACGA;;AAEA;AAIA;AAIA;AAIA;AACA;;AAEA;AACA;AAIA;AACA;AACA;;AAYA;AAPA;;;AAGA;;AAMA;AC3CA;AACA;;;ACDA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;ACRA;ACAA;AACA;;AAEA;;AAEA;;ACLA;ACAA;;AAEA;;AAEA;AACA;;;;;;AAMA;;;ACXA;AACA;;AAEA;;AAEA;;AAiEA;AAzDA;;;;AAIA;;AAIA;;AAIA;;;AAMA;;;AAwCA;AAlCA;AACA;;;;AAIA;;;;AAIA;;;;AAIA;AACA;;;AAqBA;AAfA;AACA;AACA;;AAEA;;;;ACzDA;ACJA;AACA;;;;;;AAMA;;;AAMA;;;;AAIA;;;;AAIA;AACA;;;AAKA;AACA;;AAEA;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AC3CA;;;ACDA;ACFA;ACwBA;ACHA;;AAbA;AAXA;;AA6BA;;AAEA;;AAEA;AAjCA;AAqCA;;;AAKA;;;;ACrCA","sources":["webpack://ds-loud-ng/./src/components/atoms/Avatar/Avatar.styles.js","webpack://ds-loud-ng/./src/components/atoms/Badge/Badge.styles.js","webpack://ds-loud-ng/./src/components/atoms/Badge/Badge.jsx","webpack://ds-loud-ng/./src/components/atoms/Button/Button.styles.js","webpack://ds-loud-ng/./src/components/atoms/Button/Button.jsx","webpack://ds-loud-ng/./src/components/atoms/Checkbox/Checkbox.styles.js","webpack://ds-loud-ng/./src/components/atoms/Checkbox/Checkbox.jsx","webpack://ds-loud-ng/./src/components/atoms/Divider/Divider.styles.js","webpack://ds-loud-ng/./src/components/atoms/Divider/Divider.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/Dropdown.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownItem/DropdownItem.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownItem/DropdownItem.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownPanel/DropdownPanel.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownPanel/DropdownPanel.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownToogle/DropdownToogle.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownToogle/DropdownToogle.jsx","webpack://ds-loud-ng/./src/components/atoms/Icon/Icon.styles.js","webpack://ds-loud-ng/./src/components/atoms/Icon/Icon.jsx","webpack://ds-loud-ng/./src/components/atoms/IconButton/IconButton.styles.js","webpack://ds-loud-ng/./src/components/atoms/IconButton/IconButton.jsx","webpack://ds-loud-ng/./src/components/atoms/Image/components/ImagePlaceholder/ImagePlaceholder.styles.js","webpack://ds-loud-ng/./src/components/atoms/Image/components/ImagePlaceholder/ImagePlaceholder.jsx","webpack://ds-loud-ng/./src/components/atoms/Image/Image.styles.js","webpack://ds-loud-ng/./src/components/atoms/Image/Image.jsx","webpack://ds-loud-ng/./src/components/atoms/Input/Input.styles.js","webpack://ds-loud-ng/./src/components/atoms/Input/Input.jsx","webpack://ds-loud-ng/./src/components/atoms/Modal/Modal.styles.js","webpack://ds-loud-ng/./src/components/atoms/Modal/Modal.jsx","webpack://ds-loud-ng/./src/components/atoms/Panel/Panel.styles.js","webpack://ds-loud-ng/./src/themes/icons/index.js","webpack://ds-loud-ng/./src/components/atoms/ProgressBar/ProgressBar.styles.js","webpack://ds-loud-ng/./src/components/atoms/ProgressBar/components/Bar.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectContent/SelectContent.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectContent/SelectContent.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectOption/SelectOption.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectOption/SelectOption.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/Select.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/Select.jsx","webpack://ds-loud-ng/./src/components/atoms/Table/components/DesktopTable/DesktopTable.styles.js","webpack://ds-loud-ng/./src/components/atoms/Table/components/DesktopTable/DesktopTable.jsx","webpack://ds-loud-ng/./src/components/atoms/Table/components/PhoneTable/PhoneTable.styles.js","webpack://ds-loud-ng/./src/components/atoms/Table/components/PhoneTable/PhoneTable.jsx","webpack://ds-loud-ng/./src/components/atoms/Tabs/Tabs.styles.js","webpack://ds-loud-ng/./src/components/atoms/Tabs/Tabs.jsx","webpack://ds-loud-ng/./src/components/atoms/Text/Text.styles.js","webpack://ds-loud-ng/./src/components/layout/Box/Box.styles.js","webpack://ds-loud-ng/./src/components/layout/Columns/Columns.styles.js","webpack://ds-loud-ng/./src/components/layout/Columns/Columns.jsx","webpack://ds-loud-ng/./src/components/layout/Flex/Flex.styles.js","webpack://ds-loud-ng/./src/components/layout/Flex/Flex.jsx","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/OfflineBadge/OfflineBadge.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/SideBar/SideBar.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/SideBar/SideBar.jsx","webpack://ds-loud-ng/./src/components/molecules/AppLayout/AppLayout.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/AppLayout.jsx","webpack://ds-loud-ng/./src/components/molecules/Pagination/components/PaginateButton/PaginateButton.jsx","webpack://ds-loud-ng/./src/components/molecules/Pagination/Pagination.styles.js","webpack://ds-loud-ng/./src/components/molecules/Pagination/utils/pages.js","webpack://ds-loud-ng/./src/components/molecules/StpesBar/StepsBar.styles.js","webpack://ds-loud-ng/./src/components/molecules/StpesBar/StepsBar.jsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst AvatarWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-color: ${props.$isSelected\r\n      ? `${props.theme.colors.black._500}`\r\n      : \"transparent\"};\r\n    border-radius: 50%;\r\n    border-style: solid;\r\n    border-width: ${props.theme.components.avatar.thickShadow};\r\n    display: inline-block;\r\n\r\n    &:hover {\r\n      border-color: ${!props.$isSelected && props.theme.colors.black._600};\r\n    }\r\n  `}\r\n`;\r\n\r\nconst PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    position: absolute;\r\n    ${props.$pos}: 0;\r\n    top: 100%;\r\n    width: 250px;\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: fit-content;\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  AvatarWrapper,\r\n  PanelWrapper,\r\n  Wrapper,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport {\r\n  getColor,\r\n  marginProperties,\r\n  paddingProperties,\r\n} from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: inline-block;\r\n    background-color: ${getColor(props.theme, props.$color)};\r\n    border-radius: ${props.theme.components.badge.border.radius};\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props, props.theme.components.badge.padding)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Text } from \"../\";\r\n\r\nimport { Styles } from \"./Badge.styles\";\r\n\r\nexport const Badge = (props) => {\r\n  const { id, color, margin } = props;\r\n\r\n  return (\r\n    <Styles.Wrapper $color={color} id={id} $margin={margin}>\r\n      <Text type=\"bodySemibold\">{props.children}</Text>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nBadge.propTypes = {\r\n  children: PropTypes.node,\r\n  color: PropTypes.string,\r\n  id: PropTypes.string,\r\n  margin: PropTypes.string,\r\n};\r\n\r\nBadge.defaultProps = {\r\n  children: null,\r\n  color: \"orange_700\",\r\n  id: null,\r\n  margin: \"a-0\",\r\n};\r\n","import styled, { css, keyframes } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\n//? loading animation\r\nconst rotate = keyframes`\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n`;\r\n\r\nconst ContentWrapper = styled(\"span\")`\r\n  ${(props) => `   \r\n    align-items: center;\r\n    display: flex;\r\n    visibility: ${props.$loading ? \"hidden\" : \"visible\"};\r\n  `}\r\n`;\r\n\r\nconst LoaderWrapper = styled(\"span\")`\r\n  ${(props) => css`\r\n    animation-name: ${rotate};\r\n    animation-duration: 1.5s;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: ease-in-out;\r\n    display: ${props.$loading ? \"block\" : \"none\"};\r\n    left: calc(50% - 10px); /* TODO: 10px = half icon size */\r\n    position: absolute;\r\n    top: calc(50% - 10px); /* TODO: 10px = half icon size */\r\n  `}\r\n`;\r\n\r\nconst OutlinedButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border: 1px solid ${props.theme.colors.orange._600};\r\n    border-radius: ${props.$border\r\n      ? props.$border.radius\r\n      : props.theme.components.button.outlined.borderRadius};\r\n    color: ${props.theme.colors.orange._600};\r\n    display: inline-flex;\r\n    height: ${props.theme.components.button.outlined.height};\r\n    justify-content: center;\r\n    padding: ${props.theme.components.button.outlined.padding};\r\n    position: relative;\r\n    width: ${props.$fullWidth ? \"100%\" : \"auto\"};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      border-color: ${!props.$loading && props.theme.colors.orange._800};\r\n      color: ${!props.$loading && props.theme.colors.orange._800};\r\n    }\r\n\r\n    &:active:enabled {\r\n      border-color: ${!props.$loading && props.theme.colors.orange._900};\r\n      color: ${!props.$loading && props.theme.colors.orange._900};\r\n    }\r\n\r\n    &:disabled {\r\n      border-color: ${props.theme.colors.black._400};\r\n      box-shadow: none;\r\n      color: ${props.theme.colors.black._400};\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SolidButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.orange._600};\r\n    border: none;\r\n    border-radius: ${props.$border\r\n      ? props.$border.radius\r\n      : props.theme.components.button.outlined.borderRadius};\r\n    box-shadow: ${props.theme.shadows.level1};\r\n    color: white;\r\n    display: inline-flex;\r\n    height: ${props.theme.components.button.solid.height};\r\n    justify-content: center;\r\n    padding: ${props.theme.components.button.solid.padding};\r\n    position: relative;\r\n    width: ${props.$fullWidth ? \"100%\" : \"auto\"};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.orange._800};\r\n      box-shadow: ${!props.$loading && props.theme.shadows.level2};\r\n    }\r\n\r\n    &:active:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.orange._900};\r\n      box-shadow: ${!props.$loading && props.theme.shadows.level3};\r\n    }\r\n\r\n    &:disabled {\r\n      background-color: ${props.theme.colors.black._400};\r\n      box-shadow: none;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst TextButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-radius: ${props.$border\r\n      ? props.$border.radius\r\n      : props.theme.components.button.outlined.borderRadius};\r\n    display: inline-flex;\r\n    height: ${props.theme.components.button.solid.height};\r\n    justify-content: center;\r\n    padding: ${props.theme.components.button.solid.padding};\r\n    position: relative;\r\n    width: ${props.$fullWidth ? \"100%\" : \"auto\"};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.black._200};\r\n    }\r\n\r\n    &:active:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.black._300};\r\n    }\r\n\r\n    &:disabled {\r\n      box-shadow: none;\r\n      color: ${props.theme.colors.black._400};\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ContentWrapper,\r\n  LoaderWrapper,\r\n  OutlinedButton,\r\n  SolidButton,\r\n  TextButton,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon } from \"../../../\";\r\n\r\nimport { Styles } from \"./Button.styles\";\r\n\r\nexport const Button = (props) => {\r\n  const { children, id, fullWidth, loading, onClick } = props;\r\n\r\n  const isIconButton = props.kind === \"icon\";\r\n\r\n  const iconAttributes = {\r\n    //? default values.\r\n    name: null,\r\n    size: \"sm\",\r\n    //? component values.\r\n    ...props.icon,\r\n  };\r\n\r\n  const CustomButton = ({ kind, ...others }) => {\r\n    switch (kind) {\r\n      case \"outlined\":\r\n        return <Styles.OutlinedButton {...others} />;\r\n      case \"solid\":\r\n        return <Styles.SolidButton {...others} />;\r\n      case \"text\":\r\n        return <Styles.TextButton {...others} />;\r\n      default:\r\n        return <Styles.SolidButton {...others} />;\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!loading) {\r\n      onClick && onClick();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CustomButton\r\n      $border={props.border}\r\n      disabled={props.disabled}\r\n      id={id}\r\n      $fullWidth={fullWidth}\r\n      kind={props.kind}\r\n      $loading={loading}\r\n      $margin={props.margin}\r\n      onClick={handleClick}\r\n      type={props.type}\r\n    >\r\n      {/* loading view */}\r\n      <Styles.LoaderWrapper $loading={loading} data-testid=\"loading\">\r\n        <Icon color=\"inheret\" icon=\"spinner\" size=\"sm\" />\r\n      </Styles.LoaderWrapper>\r\n\r\n      {/* content view */}\r\n      <Styles.ContentWrapper $loading={loading}>\r\n        {iconAttributes.name && (\r\n          <Icon\r\n            color=\"inheret\"\r\n            icon={iconAttributes.name}\r\n            margin={isIconButton ? \"\" : \"r-4\"}\r\n            size={iconAttributes.size}\r\n          />\r\n        )}\r\n\r\n        {children}\r\n      </Styles.ContentWrapper>\r\n    </CustomButton>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  border: PropTypes.shape({\r\n    radius: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  fullWidth: PropTypes.bool,\r\n  icon: PropTypes.shape({\r\n    name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    size: PropTypes.oneOf([\"input\", \"lg\", \"md\", \"sm\"]),\r\n  }),\r\n  id: PropTypes.string,\r\n  kind: PropTypes.oneOf([\"outlined\", \"solid\", \"text\"]),\r\n  loading: PropTypes.bool,\r\n  margin: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  type: PropTypes.oneOf([\"button\", \"submit\"]),\r\n};\r\n\r\nButton.defaultProps = {\r\n  border: {\r\n    radius: \"4px\",\r\n  },\r\n  children: null,\r\n  disabled: false,\r\n  fullWidth: false,\r\n  icon: null, //? default value insert into javascript code.\r\n  id: null,\r\n  kind: \"solid\",\r\n  loading: false,\r\n  margin: \"a-0\",\r\n  onClick: null,\r\n  type: \"button\",\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { Field } from \"formik\";\r\n\r\nimport checkImage from \"../../../assets/img/check-mark.svg\";\r\n\r\nconst CustomCheckbox = styled(Field)`\r\n  ${(props) => `  \r\n    appearance: none;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: 60%;\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: ${props.theme.components.checkbox.check.border.radius};\r\n    border-style: solid;\r\n    border-width: ${props.theme.components.checkbox.check.border.width};\r\n    box-sizing: border-box;\r\n    flex-shrink: 0;\r\n    height: ${props.theme.components.checkbox.check.width};\r\n    margin: ${props.theme.components.checkbox.check.margin};\r\n    width: ${props.theme.components.checkbox.check.width};\r\n\r\n    &:checked {\r\n      background-color: ${props.theme.colors.orange._500};\r\n      background-image: url(${checkImage});\r\n      border-color: ${props.theme.colors.orange._500};\r\n    }\r\n\r\n    &:hover&:checked {\r\n      background-color: ${props.theme.colors.orange._700};\r\n      border-color: ${props.theme.colors.orange._700};\r\n    }\r\n\r\n    &:hover&:not(:checked) {\r\n      border-color: ${props.theme.colors.black._700};\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  CustomCheckbox,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Flex, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Checkbox.styles\";\r\n\r\nexport const Checkbox = (props) => {\r\n  const { description, id, label, margin, name } = props;\r\n\r\n  return (\r\n    <Flex margin={margin} vAlign=\"start\">\r\n      <Styles.CustomCheckbox id={id} name={name} type=\"checkbox\" />\r\n\r\n      <div style={{ flexGrow: \"0\" }}>\r\n        <Text as=\"label\" htmlFor={id} margin=\"b-4\" type=\"bodySemibold\">\r\n          {label}\r\n        </Text>\r\n\r\n        {description && <Text type=\"captionRegular\">{description}</Text>}\r\n      </div>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  id: PropTypes.string,\r\n  description: PropTypes.string,\r\n  label: PropTypes.string.isRequired,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string,\r\n};\r\n\r\nCheckbox.defaultProps = {\r\n  id: null,\r\n  description: null,\r\n  label: \"\",\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { getColor, marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => `  \r\n    border: none;\r\n    background-color: ${getColor(props.theme, props.$color)};\r\n    height: ${props.height || props.theme.components.divider.height};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"./Divider.styles\";\r\n\r\nexport const Divider = (props) => {\r\n  const { color, height, margin } = props;\r\n\r\n  return <Styles.Wrapper height={height} $color={color} $margin={margin} />;\r\n};\r\n\r\nDivider.propTypes = {\r\n  color: PropTypes.string,\r\n  height: PropTypes.string,\r\n  margin: PropTypes.string,\r\n};\r\n\r\nDivider.defaultProps = {\r\n  color: \"black_300\",\r\n  height: \"\",\r\n  margin: \"a-0\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useOuterClick } from \"../../../hooks/useOuterClick\";\r\n\r\nimport { Styles } from \"./Dropdown.styles\";\r\n\r\n//TODO: Agregar margin a este componente.\r\nexport const Dropdown = (props) => {\r\n  const { children, name, onSelect } = props;\r\n\r\n  const [optionSelected, setOptionSelected] = useState(null);\r\n  const [showPanel, setShowPanel] = useState(false);\r\n\r\n  const innerRef = useOuterClick(() => {\r\n    if (showPanel) toogleShowPanel();\r\n  });\r\n\r\n  const toogleShowPanel = () => {\r\n    setShowPanel((prev) => !prev);\r\n  };\r\n\r\n  const handleSelect = (value, name) => {\r\n    toogleShowPanel();\r\n\r\n    if (value !== optionSelected) {\r\n      onSelect && onSelect(value, name);\r\n      setOptionSelected(value);\r\n    }\r\n  };\r\n\r\n  const getPanel = React.Children.toArray(children)[1];\r\n  const getToggle = React.Children.toArray(children)[0];\r\n\r\n  return (\r\n    <Styles.DropdownWrapper ref={innerRef}>\r\n      {React.cloneElement(getToggle, {\r\n        onClick: toogleShowPanel,\r\n        openPanel: showPanel,\r\n      })}\r\n\r\n      {React.cloneElement(getPanel, {\r\n        name,\r\n        onSelect: handleSelect,\r\n        showPanel,\r\n      })}\r\n    </Styles.DropdownWrapper>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n};\r\n\r\nDropdown.defaultProps = {\r\n  children: null,\r\n  name: null,\r\n  onSelect: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ItemWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    width: ${props.theme.components.dropdown.panelSize.width};\r\n\r\n    &:hover:not([disabled]) {\r\n      background-color: ${props.theme.colors.black._200};\r\n      overflow: hiddem;\r\n    }\r\n\r\n    &[disabled] {\r\n      cursor: not-allowed;\r\n      filter: opacity(50%);\r\n    }\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ItemWrapper } from \"./DropdownItem.styles\";\r\n\r\nexport const DropdownItem = (props) => {\r\n  const { disabled, name, onSelect, value } = props;\r\n\r\n  const handleClick = () => {\r\n    if (!disabled) {\r\n      onSelect && onSelect(value, name);\r\n    }\r\n  };\r\n\r\n  return <ItemWrapper onClick={handleClick} {...props} />;\r\n};\r\n\r\nDropdownItem.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  value: PropTypes.any,\r\n};\r\n\r\nDropdownItem.defaultProps = {\r\n  disabled: false,\r\n  name: null,\r\n  onSelect: null,\r\n  value: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const TriangleWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-bottom: 10px solid transparent;\r\n    border-left: 10px solid ${props.theme.colors.alert.bgColors.neutral};\r\n    border-top: 10px solid transparent;\r\n    position: absolute;\r\n    top: -5px;\r\n    transform: rotate(-90deg);\r\n\r\n    ${props.direction === \"right\" && \"left: 10px;\"}\r\n    ${props.direction === \"left\" && \"right: 35px;\"}\r\n  `};\r\n`;\r\n\r\nexport const PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: ${props.$showPanel ? \"block\" : \"none\"};\r\n    position: absolute;\r\n    top: 100%;\r\n    width: ${props.theme.components.dropdown.panelSize.width};\r\n\r\n    ${props.direction === \"right\" && \"left: 0;\"}\r\n    ${props.direction === \"left\" && \"right: 0;\"}\r\n  `};\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Panel } from \"../../../../../\";\r\n\r\nimport { PanelWrapper, TriangleWrapper } from \"./DropdownPanel.styles\";\r\n\r\nexport const DropdownPanel = (props) => {\r\n  const { children, direction, name, onSelect, showPanel } = props;\r\n\r\n  return (\r\n    <PanelWrapper direction={direction} $showPanel={showPanel}>\r\n      <Panel margin=\"t-8\" padding=\"y-4 x-0\">\r\n        <TriangleWrapper direction={direction} />\r\n        {children.map((item, index) => {\r\n          return React.cloneElement(item, {\r\n            key: `listItem-${index + 1}`,\r\n            name,\r\n            onSelect,\r\n          });\r\n        })}\r\n      </Panel>\r\n    </PanelWrapper>\r\n  );\r\n};\r\n\r\nDropdownPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  direction: PropTypes.oneOf([\"left\", \"right\"]),\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  showPanel: PropTypes.bool,\r\n};\r\n\r\nDropdownPanel.defaultProps = {\r\n  children: null,\r\n  direction: \"right\",\r\n  name: null,\r\n  onSelect: null,\r\n  showPanel: false,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ToogleWrapper = styled(\"div\")`\r\n  display: inline-block;\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon } from \"../../../../../\";\r\n\r\nimport { ContentWrapper, ToogleWrapper } from \"./DropdownToogle.styles\";\r\n\r\nexport const DropdownToogle = (props) => {\r\n  const { children, openPanel, ...others } = props;\r\n\r\n  const icon = openPanel ? \"angle-up\" : \"angle-down\";\r\n\r\n  return (\r\n    <ToogleWrapper {...others}>\r\n      <ContentWrapper>\r\n        {children}\r\n        <Icon icon={icon} margin=\"l-4\" size=\"sm\" />\r\n      </ContentWrapper>\r\n    </ToogleWrapper>\r\n  );\r\n};\r\n\r\nDropdownToogle.propTypes = {\r\n  children: PropTypes.node,\r\n  openPanel: PropTypes.bool,\r\n};\r\n\r\nDropdownToogle.defaultProps = {\r\n  children: null,\r\n  openPanel: false,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { getColor, marginProperties } from \"../../../utils/styles\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst IconItem = styled(FontAwesomeIcon)`\r\n  ${(props) => css`\r\n    font-size: ${props.theme.components.icon.iconSizes[props.$customsize]};\r\n    max-height: ${props.theme.components.icon.iconSizes[props.$customsize]};\r\n    max-widt: ${props.theme.components.icon.iconSizes[props.$customsize]};\r\n  `}\r\n`;\r\n\r\nconst IconWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    color: ${getColor(props.theme, props.$color)};\r\n    display: inline-flex;\r\n    height: ${props.theme.components.icon.wrapperSizes[props.size]};\r\n    justify-content: center;\r\n    width: ${props.theme.components.icon.wrapperSizes[props.size]};\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  IconItem,\r\n  IconWrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"./Icon.styles\";\r\n\r\nexport const Icon = (props) => {\r\n  const { color, icon, margin, onClick, size, spin } = props;\r\n\r\n  const handleClick = () => {\r\n    onClick && onClick();\r\n  };\r\n\r\n  return (\r\n    <Styles.IconWrapper\r\n      $color={color}\r\n      $margin={margin}\r\n      onClick={handleClick}\r\n      size={size}\r\n    >\r\n      <Styles.IconItem $customsize={size} icon={icon} spin={spin} />\r\n    </Styles.IconWrapper>\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired,\r\n  margin: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  size: PropTypes.oneOf([\r\n    \"avatar\",\r\n    \"avatarSm\",\r\n    \"input\",\r\n    \"lg\",\r\n    \"md\",\r\n    \"sm\",\r\n    \"xl\",\r\n  ]),\r\n  spin: PropTypes.bool,\r\n};\r\n\r\nIcon.defaultProps = {\r\n  color: \"black_700\",\r\n  icon: \"home\",\r\n  margin: \"a-0\",\r\n  onClick: null,\r\n  size: \"md\",\r\n  spin: false,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst IconButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    height: 38px;\r\n    justify-content: center;\r\n    width: 38px;\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &:active:enabled {\r\n      background-color: ${!props.loading && props.theme.colors.black._300};\r\n    }\r\n\r\n    &:disabled {\r\n      border-color: ${props.theme.colors.black._400};\r\n      box-shadow: none;\r\n      color: ${props.theme.colors.black._400};\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  IconButton,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon } from \"../../..\";\r\n\r\nimport { Styles } from \"./IconButton.styles\";\r\n\r\nexport const IconButton = (props) => {\r\n  const { disabled, icon, id, margin, onClick } = props;\r\n\r\n  const handleClick = () => {\r\n    onClick && onClick();\r\n  };\r\n\r\n  return (\r\n    <Styles.IconButton\r\n      disabled={disabled}\r\n      id={id}\r\n      $margin={margin}\r\n      onClick={handleClick}\r\n    >\r\n      <Icon icon={icon.name} size={icon.size} />\r\n    </Styles.IconButton>\r\n  );\r\n};\r\n\r\nIconButton.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.shape({\r\n    name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n    size: PropTypes.oneOf([\"input\", \"lg\", \"md\", \"sm\"]),\r\n  }).isRequired,\r\n  id: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nIconButton.defaultProps = {\r\n  disabled: false,\r\n  icon: null, //? default value insert into javascript code.\r\n  id: null,\r\n  margin: \"a-0\",\r\n  onClick: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst IconPlaceholder = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.orange._600};\r\n    border-radius: ${props.$type === \"round\" ? \"50%\" : \"0\"};\r\n    display: inline-flex;\r\n    height: ${props.theme.components.image.height[props.$type][props.$size]};\r\n    justify-content: center;\r\n    width: ${props.theme.components.image.width[props.$type][props.$size]};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  IconPlaceholder,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon, Text } from \"../../../../..\";\r\n\r\nimport { Styles } from \"./ImagePlaceholder.styles\";\r\n\r\nexport const ImagePlaceholder = (props) => {\r\n  const { placeholder, margin, size, type } = props;\r\n\r\n  const selectTextSize = () => {\r\n    if ([\"avatarSm\", \"sm\"].includes(size)) {\r\n      return \"captionSemibold\";\r\n    }\r\n\r\n    return \"bodySemibold\";\r\n  };\r\n\r\n  return (\r\n    <Styles.IconPlaceholder $margin={margin} $size={size} $type={type}>\r\n      {placeholder ? (\r\n        <Text color=\"black_100\" type={selectTextSize()}>\r\n          {placeholder.charAt(0).toUpperCase()}\r\n        </Text>\r\n      ) : (\r\n        <Icon color=\"black_100\" icon=\"camera\" size={size} />\r\n      )}\r\n    </Styles.IconPlaceholder>\r\n  );\r\n};\r\n\r\nImagePlaceholder.propTypes = {\r\n  margin: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.oneOf([\"avatar\", \"avatarSm\", \"lg\", \"md\", \"sm\"]),\r\n  type: PropTypes.oneOf([\"round\", \"square\"]),\r\n};\r\n\r\nImagePlaceholder.defaultProps = {\r\n  margin: \"a-0\",\r\n  placeholder: \"\",\r\n  size: \"md\",\r\n  type: \"square\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst ImageStyles = styled(\"img\")`\r\n  ${(props) => css`\r\n    border-radius: ${props.$type === \"round\" ? \"50%\" : \"0px\"};\r\n    display: block;\r\n    height: ${props.theme.components.image.height[props.$type][props.$size]};\r\n    object-fit: cover;\r\n    width: ${props.theme.components.image.width[props.$type][props.$size]};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  ImageStyles,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ImagePlaceholder } from \"./components\";\r\n\r\nimport { Styles } from \"./Image.styles\";\r\n\r\nexport const Image = (props) => {\r\n  const { alt, img, margin, placeholder, size, type } = props;\r\n\r\n  if (!img) {\r\n    return (\r\n      <ImagePlaceholder\r\n        margin={margin}\r\n        placeholder={placeholder}\r\n        size={size}\r\n        type={type}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Styles.ImageStyles\r\n      alt={alt}\r\n      $margin={margin}\r\n      $size={size}\r\n      src={img}\r\n      $type={type}\r\n    />\r\n  );\r\n};\r\n\r\nImage.propTypes = {\r\n  alt: PropTypes.string,\r\n  img: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.oneOf([\"avatar\", \"avatarSm\", \"lg\", \"md\", \"sm\"]),\r\n  type: PropTypes.oneOf([\"round\", \"square\"]),\r\n};\r\n\r\nImage.defaultProps = {\r\n  alt: null,\r\n  img: null,\r\n  margin: \"a-0\",\r\n  placeholder: \"\",\r\n  size: \"md\",\r\n  type: \"square\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { ErrorMessage, Field } from \"formik\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst Error = styled(ErrorMessage)`\r\n  ${(props) => css`\r\n    color: ${props.theme.colors.alert.colors.error};\r\n    font-size: ${props.theme.components.text.sizes.sm};\r\n    font-weight: ${props.theme.components.text.weights.regular};\r\n    line-height: ${props.theme.components.text.lineHeights.sm};\r\n  `};\r\n`;\r\n\r\nconst ErrorWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    height: ${props.theme.components.text.lineHeights.sm};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nconst InputStyles = styled(Field)`\r\n  ${(props) => css`\r\n    background-color: transparent;\r\n    border: none;\r\n    flex-grow: 1;\r\n    font-size: ${props.theme.components.text.sizes.md};\r\n    font-weight: ${props.theme.components.text.weights.regular};\r\n    height: ${props.theme.components.input.height};\r\n    line-height: ${props.theme.components.text.lineHeights.md};\r\n    outline: none;\r\n    padding: 0;\r\n  `};\r\n`;\r\n\r\nconst InputWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: ${props.theme.components.input.border.radius};\r\n    border-style: solid;\r\n    border-width: ${props.theme.components.input.border.weight};\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    width: 100%;\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props, props.theme.components.input.padding)}\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Error,\r\n  ErrorWrapper,\r\n  InputStyles,\r\n  InputWrapper,\r\n  Wrapper,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ShowPasswordButton } from \"./components\";\r\nimport { Icon, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Input.styles\";\r\n\r\nexport const Input = (props) => {\r\n  const { description, icon, id, label, name, type } = props;\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const showPasswordValue = () => {\r\n    setShowPassword((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={props.margin}>\r\n      {/* label */}\r\n      {!!label && (\r\n        <Text as=\"label\" htmlFor={id} margin=\"b-4\" size=\"sm\" weight=\"semibold\">\r\n          {label}\r\n        </Text>\r\n      )}\r\n\r\n      {/* label */}\r\n      {!!description && (\r\n        <Text color=\"black_400\" margin=\"b-4\" size=\"sm\">\r\n          {description}\r\n        </Text>\r\n      )}\r\n\r\n      <Styles.InputWrapper ref={props.reference}>\r\n        {/* left icon */}\r\n        {!!icon && <Icon icon={icon} margin=\"r-8\" size=\"sm\" />}\r\n\r\n        <Styles.InputStyles\r\n          autoComplete={props.autoComplete}\r\n          autoFocus={props.autoFocus}\r\n          id={id}\r\n          disabled={props.disabled}\r\n          innerRef={props.innerRef}\r\n          name={name}\r\n          onKeyPress={props.onKeyPress}\r\n          placeholder={props.placeholder}\r\n          readOnly={props.readOnly}\r\n          type={showPassword ? \"text\" : type}\r\n        />\r\n\r\n        {type === \"password\" && (\r\n          <ShowPasswordButton onClick={showPasswordValue} show={showPassword} />\r\n        )}\r\n      </Styles.InputWrapper>\r\n\r\n      {/* error message */}\r\n      <Styles.ErrorWrapper $margin=\"l-4 t-4\">\r\n        <Styles.Error component=\"div\" name={name} />\r\n      </Styles.ErrorWrapper>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  autoComplete: PropTypes.string,\r\n  autoFocus: PropTypes.bool,\r\n  description: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.string,\r\n  id: PropTypes.string,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\r\n  label: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  onKeyPress: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  readOnly: PropTypes.bool,\r\n  reference: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\r\n  type: PropTypes.oneOf([\"number\", \"password\", \"text\"]),\r\n};\r\n\r\nInput.defaultProps = {\r\n  autoComplete: \"off\",\r\n  autoFocus: false,\r\n  description: \"\",\r\n  disabled: false,\r\n  icon: null,\r\n  id: null,\r\n  innerRef: null,\r\n  label: \"\",\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n  onKeyPress: null,\r\n  placeholder: \"\",\r\n  readOnly: false,\r\n  reference: null,\r\n  type: \"text\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../utils/styles/spacing\";\r\n\r\nconst ButtonsWrapper = styled(\"div\")`\r\n  text-align: right;\r\n`;\r\n\r\nconst CloseBtnWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    position: absolute;\r\n    right: ${props.theme.components.modal.closeButton.position.right};\r\n    top: ${props.theme.components.modal.closeButton.position.top};\r\n  `}\r\n`;\r\n\r\nconst ContentBox = styled(\"div\")`\r\n  ${(props) => css`\r\n    padding: ${paddingProperties(props)};\r\n  `}\r\n`;\r\n\r\nconst Overlay = styled(\"div\")`\r\n  align-items: center;\r\n  backdrop-filter: blur(1px);\r\n  background-color: rgba(0, 0, 0, 0.35); //TODO: agregar color al theme.\r\n  display: flex;\r\n  height: 100vh;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    margin: auto;\r\n    max-width: ${props.width};\r\n    padding: ${paddingProperties(\r\n      props,\r\n      props.theme.components.modal.panel.padding,\r\n    )};\r\n    width: 100%;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ButtonsWrapper,\r\n  CloseBtnWrapper,\r\n  ContentBox,\r\n  Overlay,\r\n  PanelWrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Button, IconButton, Panel } from \"../../../\";\r\n\r\nimport { Styles } from \"./Modal.styles\";\r\n\r\nexport const Modal = (props) => {\r\n  const { onClose, show } = props;\r\n\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Styles.Overlay>\r\n      <Styles.PanelWrapper width={props.width}>\r\n        <Panel padding=\"a-20\">\r\n          <Styles.CloseBtnWrapper>\r\n            <IconButton icon={{ name: \"times\" }} onClick={onClose} />\r\n          </Styles.CloseBtnWrapper>\r\n\r\n          <Styles.ContentBox $padding=\"r-28\">\r\n            {props.children}\r\n          </Styles.ContentBox>\r\n\r\n          <Styles.ButtonsWrapper>\r\n            {!props.cancelButton.hide && (\r\n              <Button kind=\"outlined\" onClick={onClose}>\r\n                {props.cancelButton.text}\r\n              </Button>\r\n            )}\r\n\r\n            {!props.confirmButton.hide && (\r\n              <Button margin=\"l-8\" onClick={props.confirmButton.onClick}>\r\n                {props.confirmButton.text}\r\n              </Button>\r\n            )}\r\n          </Styles.ButtonsWrapper>\r\n        </Panel>\r\n      </Styles.PanelWrapper>\r\n    </Styles.Overlay>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  cancelButton: PropTypes.shape({\r\n    hide: PropTypes.bool,\r\n    text: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n  confirmButton: PropTypes.shape({\r\n    hide: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    text: PropTypes.string,\r\n  }),\r\n  onClose: PropTypes.func,\r\n  show: PropTypes.bool,\r\n  width: PropTypes.string,\r\n};\r\n\r\nModal.defaultProps = {\r\n  cancelButton: {\r\n    hide: false,\r\n    text: \"Cancelar\",\r\n  },\r\n  children: null,\r\n  confirmButton: {\r\n    hide: false,\r\n    onClick: null,\r\n    text: \"Continuar\",\r\n  },\r\n  onClose: null,\r\n  show: false,\r\n  width: \"auto\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst ContentWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    flex-grow: 1;\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nconst PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.alert.bgColors[props.type]};\r\n    border-radius: ${props.theme.components.panel.border.radius};\r\n    box-shadow: ${props.theme.shadows.level2};\r\n    color: ${props.theme.colors.alert.colors[props.type]};\r\n    display: flex;\r\n    position: relative;\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props, props.theme.components.panel.padding)}\r\n  \r\n    &::-webkit-scrollbar {\r\n      width: ${props.theme.components.panel.scroll.width};\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._300};\r\n    }\r\n  `}\r\n`;\r\n\r\nconst PositionWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: ${props.$align};\r\n    display: flex;\r\n    flex-grow: 1;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ContentWrapper,\r\n  PanelWrapper,\r\n  PositionWrapper,\r\n};\r\n","import { fontawesome } from \"./icons\";\r\n\r\nexport const icons = {\r\n  fontawesome,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst BarWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.orange._600};\r\n    height: ${props.size &&\r\n    props.theme.components.progressBar.height[props.size]};\r\n    width: ${props.$porcent ? props.$porcent : \"0%\"};\r\n  `}\r\n`;\r\n\r\nconst ProgressBarWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._300};\r\n    border-radius: ${props.$borderRound &&\r\n    props.theme.components.progressBar.border.radius[props.size]};\r\n    overflow: hidden;\r\n    width: 100%;\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  BarWrapper,\r\n  ProgressBarWrapper,\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"../ProgressBar.styles\";\r\n\r\nexport const Bar = (props) => {\r\n  const { onFinish, step, stepTime, steps } = props;\r\n\r\n  const [width, setWidth] = useState(0);\r\n\r\n  const timer = useRef();\r\n\r\n  const animationAddStep = () => {\r\n    if (timer.current) clearTimeout(timer.current);\r\n\r\n    timer.current = setTimeout(() => {\r\n      setWidth((previusWidth) => previusWidth + 1);\r\n    }, stepTime);\r\n  };\r\n\r\n  const animationSubtractStep = () => {\r\n    if (timer.current) clearTimeout(timer.current);\r\n\r\n    timer.current = setTimeout(() => {\r\n      setWidth((previusWidth) => previusWidth - 1);\r\n    }, stepTime);\r\n  };\r\n\r\n  //? clear timer when unmounted component.\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timer.current) clearTimeout(timer.current);\r\n    };\r\n  }, []);\r\n\r\n  //? animation controller.\r\n  useEffect(() => {\r\n    const finishWidth = Math.floor((step * 100) / steps);\r\n\r\n    if (props.noShowAnimationOnFirstLoad) {\r\n      setWidth(finishWidth);\r\n    } else {\r\n      if (finishWidth > width) {\r\n        animationAddStep();\r\n      } else if (finishWidth < width) {\r\n        animationSubtractStep();\r\n      }\r\n    }\r\n\r\n    if (finishWidth === width) {\r\n      onFinish && onFinish();\r\n    }\r\n  }, [step, steps, width]); // eslint-disable-line\r\n\r\n  const porcentString = () => {\r\n    let porcent = width;\r\n\r\n    if (porcent <= 0) porcent = 0;\r\n    if (porcent > 100) porcent = 100;\r\n\r\n    return `${porcent}%`;\r\n  };\r\n\r\n  return <Styles.BarWrapper size={props.size} $porcent={porcentString()} />;\r\n};\r\n\r\nBar.propTypes = {\r\n  noShowAnimationOnFirstLoad: PropTypes.bool,\r\n  onFinish: PropTypes.func,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  step: PropTypes.number,\r\n  stepTime: PropTypes.number,\r\n  steps: PropTypes.number,\r\n};\r\n\r\nBar.defaultProps = {\r\n  noShowAnimationOnFirstLoad: false,\r\n  onFinish: null,\r\n  size: \"md\",\r\n  step: 0,\r\n  stepTime: 10,\r\n  steps: 0,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst SelectPanel = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: ${props.theme.components.select.border.radius};\r\n    border-style: solid;\r\n    border-width: ${props.theme.components.select.border.width};\r\n    box-sizing: border-box;\r\n    margin-top: ${props.theme.components.select.panel.margin.top};\r\n    max-height: ${props.$maxHeight};\r\n    overflow: auto;\r\n    padding: ${props.theme.components.select.panel.padding};\r\n    position: absolute;\r\n    top: ${props.theme.components.select.height};\r\n    z-index: 50;\r\n    width: 100%;\r\n\r\n    &::-webkit-scrollbar {\r\n      width: ${props.theme.components.select.scroll.width};\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._300};\r\n    }\r\n  `};\r\n`;\r\n\r\nconst SelectedOption = styled(\"div\")`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst SelectedOptionWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: ${props.theme.components.select.border.radius};\r\n    border-style: solid;\r\n    border-width: ${props.theme.components.select.border.width};\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    height: ${props.theme.components.select.height};\r\n    opacity: ${props.disabled && \"0.5\"};\r\n    width: 100%;\r\n  `};\r\n`;\r\n\r\nconst SelectWrapper = styled(\"div\")`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Styles = {\r\n  SelectPanel,\r\n  SelectedOption,\r\n  SelectedOptionWrapper,\r\n  SelectWrapper,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { SelectContext } from \"../../SelectContext\";\r\n\r\nimport { Icon, SelectOption, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./SelectContent.styles\";\r\n\r\nimport { disclosureIcon } from \"../../../../../utils/icons/icons\";\r\n\r\nexport const SelectContent = (props) => {\r\n  const { disabled, maxHeight } = props;\r\n\r\n  const ctx = useContext(SelectContext);\r\n\r\n  const handleClick = () => {\r\n    if (!disabled) {\r\n      ctx.toogleSelect();\r\n    }\r\n  };\r\n\r\n  const getValue = () => {\r\n    const option = ctx.options.find(\r\n      (option) => option.value === ctx.selectedValue,\r\n    );\r\n    return option ? option.display : null;\r\n  };\r\n\r\n  return (\r\n    <Styles.SelectWrapper>\r\n      <Styles.SelectedOptionWrapper disabled={disabled} onClick={handleClick}>\r\n        <Styles.SelectedOption>\r\n          <Text margin=\"l-8\">\r\n            {getValue() || ctx.selectedValue || \"- Seleccione una opción -\"}\r\n          </Text>\r\n        </Styles.SelectedOption>\r\n\r\n        {/* disclosure icon */}\r\n        <Icon icon={disclosureIcon(ctx.isOpen)} margin=\"r-8\" size=\"sm\" />\r\n      </Styles.SelectedOptionWrapper>\r\n\r\n      {/* panel */}\r\n      {ctx.isOpen ? (\r\n        <Styles.SelectPanel $margin=\"t-8\" $maxHeight={maxHeight}>\r\n          {ctx.options.map((option) => (\r\n            <SelectOption key={`option-${option.value}`} value={option.value}>\r\n              {option.children}\r\n            </SelectOption>\r\n          ))}\r\n        </Styles.SelectPanel>\r\n      ) : null}\r\n    </Styles.SelectWrapper>\r\n  );\r\n};\r\n\r\nSelectContent.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  maxHeight: PropTypes.string,\r\n};\r\n\r\nSelectContent.defaultProps = {\r\n  disabled: false,\r\n  maxHeight: \"auto\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst SelectOption = styled(\"div\")`\r\n  ${(props) => css`\r\n    cursor: pointer;\r\n    padding: 4px 8px;\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  SelectOption,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { SelectContext } from \"../../SelectContext\";\r\n\r\nimport { Styles } from \"./SelectOption.styles\";\r\n\r\nexport const SelectOption = (props) => {\r\n  const { value } = props;\r\n\r\n  const ctx = useContext(SelectContext);\r\n\r\n  const handleClick = () => {\r\n    ctx.handleSelectedValue(value);\r\n    ctx.closeSelect();\r\n  };\r\n\r\n  return (\r\n    <Styles.SelectOption onClick={handleClick}>\r\n      {props.children}\r\n    </Styles.SelectOption>\r\n  );\r\n};\r\n\r\nSelectOption.propTypes = {\r\n  children: PropTypes.node,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n};\r\n\r\nSelectOption.defaultProps = {\r\n  children: null,\r\n  value: \"\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { SelectProvider } from \"./SelectContext\";\r\n\r\nimport { SelectValue } from \"./components/SelectValue/SelectValue\";\r\nimport { SelectContent } from \"./components\";\r\nimport { Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Select.styles.js\";\r\n\r\nexport const Select = (props) => {\r\n  const { disabled, label, margin, maxHeight, name, options } = props;\r\n\r\n  return (\r\n    <SelectProvider name={name} options={options}>\r\n      <SelectValue name={name} />\r\n\r\n      <Styles.Wrapper $margin={margin}>\r\n        {!!label && (\r\n          <Text\r\n            as=\"label\"\r\n            htmlFor={name}\r\n            margin=\"b-4\"\r\n            size=\"sm\"\r\n            weight=\"semibold\"\r\n          >\r\n            {label}\r\n          </Text>\r\n        )}\r\n\r\n        <SelectContent disabled={disabled} maxHeight={maxHeight} />\r\n      </Styles.Wrapper>\r\n    </SelectProvider>\r\n  );\r\n};\r\n\r\nSelect.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  maxHeight: PropTypes.string, //? content panel height\r\n  options: PropTypes.array,\r\n};\r\n\r\nSelect.defaultProps = {\r\n  disabled: false,\r\n  label: \"\",\r\n  name: \"\",\r\n  margin: \"\",\r\n  maxHeight: \"auto\",\r\n  options: [],\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst Column = styled(\"div\")`\r\n  ${(props) => `\r\n    width: ${props.width};\r\n  `}\r\n`;\r\n\r\nconst Row = styled(\"div\")`\r\n  ${(props) => `\r\n    align-items: center;\r\n    border-bottom-color: ${props.theme.colors.black._400};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: ${props.theme.components.table.row.borderBottom.width};\r\n    box-sizing: border-box;\r\n    cursor: ${!props.$isHeader ? \"pointer\" : \"default\"};\r\n    display: flex;\r\n    padding: ${props.theme.components.table.row.padding};\r\n    width: 100%;\r\n\r\n    &:hover {\r\n      background-color: ${\r\n        !props.$isHeader ? props.theme.colors.black._200 : \"transparent\"\r\n      };\r\n    }\r\n\r\n    &:hover&:active {\r\n      background-color: ${\r\n        !props.$isHeader ? props.theme.colors.black._300 : \"transparent\"\r\n      };\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Column,\r\n  Row,\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Text } from \"../../..\";\r\n\r\nimport { Styles } from \"./DesktopTable.styles\";\r\n\r\nexport const DesktopTable = (props) => {\r\n  const { columns, data, desktopColumns, margin, name, onClick } = props;\r\n\r\n  const list =\r\n    desktopColumns.length > 0 ? desktopColumns : columns.length ? columns : [];\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={margin}>\r\n      <Styles.Row $isHeader>\r\n        {list.map((column, idxC) => (\r\n          <Styles.Column\r\n            key={`table-${name}-row-title-column-${idxC}`}\r\n            width={column.width}\r\n          >\r\n            <Text weight=\"semibold\">{column.label}</Text>\r\n          </Styles.Column>\r\n        ))}\r\n      </Styles.Row>\r\n\r\n      {data.map((row, idxR) => (\r\n        <Styles.Row\r\n          key={`table-row-${idxR}`}\r\n          onClick={() => onClick && onClick(row)}\r\n        >\r\n          {list.map((column, idxC) => (\r\n            <Styles.Column\r\n              key={`table-${name}-row-${idxR}-column-${idxC}`}\r\n              width={column.width}\r\n            >\r\n              {column.content(row)}\r\n            </Styles.Column>\r\n          ))}\r\n        </Styles.Row>\r\n      ))}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nDesktopTable.propTypes = {\r\n  columns: PropTypes.array,\r\n  data: PropTypes.array.isRequired,\r\n  desktopColumns: PropTypes.array,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nDesktopTable.defaultProps = {\r\n  columns: [],\r\n  data: [],\r\n  desktopColumns: [],\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n  onClick: null,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst Column = styled(\"div\")`\r\n  ${(props) => `\r\n    display: ${props.mobile?.inline ? \"inline-block\" : \"block\"};\r\n    width: ${props.mobile?.width ? props.mobile.width : \"100%\"};\r\n  `};\r\n`;\r\n\r\nconst Row = styled(\"div\")`\r\n  ${(props) => `\r\n    border-bottom-color: ${props.theme.colors.black._400};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: ${props.theme.components.table.row.borderBottom.width};\r\n    box-sizing: content-box;\r\n    padding: ${props.theme.components.table.row.padding};\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &:hover&:active {\r\n      background-color: ${props.theme.colors.black._300};\r\n    }\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Column,\r\n  Row,\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Text } from \"../../..\";\r\n\r\nimport { Styles } from \"./PhoneTable.styles\";\r\n\r\nexport const PhoneTable = (props) => {\r\n  const { columns, data, mobileColumns, margin, name, onClick } = props;\r\n\r\n  const list =\r\n    mobileColumns.length > 0 ? mobileColumns : columns.length ? columns : [];\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={margin}>\r\n      {data.map((row, idx) => (\r\n        <Styles.Row\r\n          key={`table-${name}-row-${idx}`}\r\n          onClick={() => onClick && onClick(row)}\r\n        >\r\n          {list.map((column, idx) => (\r\n            <Styles.Column\r\n              key={`table-${name}-column-${idx}`}\r\n              mobile={column.mobile}\r\n            >\r\n              <Text weight=\"semibold\">{column.label}</Text>\r\n\r\n              {column.content(row)}\r\n            </Styles.Column>\r\n          ))}\r\n        </Styles.Row>\r\n      ))}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nPhoneTable.propTypes = {\r\n  columns: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.string,\r\n  mobileColumns: PropTypes.array,\r\n  name: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nPhoneTable.defaultProps = {\r\n  columns: [],\r\n  data: [],\r\n  margin: \"a-0\",\r\n  mobileColumns: [],\r\n  name: \"\",\r\n  onClick: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst TabsBar = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-bottom-color: ${props.theme.colors.black._200};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: ${props.theme.components.tabs.bar.border.width};\r\n\r\n    ${paddingProperties(props, props.theme.components.tabs.bar.padding)}\r\n  `};\r\n`;\r\n\r\nconst TabButton = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom-color: ${props.$isSelected\r\n      ? props.theme.colors.orange._600\r\n      : \"transparent\"};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: ${props.theme.components.tabs.button.border.width};\r\n\r\n    ${paddingProperties(props, props.theme.components.tabs.button.padding)}\r\n\r\n    &:hover {\r\n      border-bottom-color: ${props.theme.colors.orange._300};\r\n    }\r\n  `};\r\n`;\r\n\r\nconst TabContent = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${paddingProperties(props, props.theme.components.tabs.content.padding)}\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  TabsBar,\r\n  TabButton,\r\n  TabContent,\r\n  Wrapper,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Tabs.styles\";\r\n\r\nexport const Tabs = (props) => {\r\n  const { children, margin, name, padding } = props;\r\n\r\n  const [tabsName, setTabsName] = useState([]);\r\n  const [posTabSelected, setPosTabSelected] = useState(0);\r\n\r\n  useEffect(() => {\r\n    children.forEach((elm) => {\r\n      setTabsName((prev) => [...prev, elm.props.name]);\r\n    });\r\n  }, []); // eslint-disable-line\r\n\r\n  const handleBtnClick = (e) => {\r\n    const tabIdx = tabsName.indexOf(e.target.innerText);\r\n    setPosTabSelected(tabIdx);\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={margin} $padding={padding}>\r\n      <Styles.TabsBar>\r\n        {tabsName.map((tabName, idx) => {\r\n          return (\r\n            <Styles.TabButton\r\n              key={`${name}_tab_${idx}`}\r\n              id={tabName}\r\n              $isSelected={idx === posTabSelected}\r\n              onClick={handleBtnClick}\r\n              value={tabName}\r\n            >\r\n              <Text weight=\"semibold\">{tabName}</Text>\r\n            </Styles.TabButton>\r\n          );\r\n        })}\r\n      </Styles.TabsBar>\r\n\r\n      <Styles.TabContent>{children[posTabSelected]}</Styles.TabContent>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nTabs.propTypes = {\r\n  children: PropTypes.node,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string,\r\n  padding: PropTypes.string,\r\n};\r\n\r\nTabs.defaultProps = {\r\n  children: null,\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n  padding: \"a-0\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport {\r\n  getColor,\r\n  marginProperties,\r\n  paddingProperties,\r\n} from \"../../../utils/styles\";\r\n\r\nconst textStyles = (props) => {\r\n  return css`\r\n    color: ${getColor(props.theme, props.$color)};\r\n    font-family: \"Source Sans 3\", sans-serif;\r\n    font-size: ${() => {\r\n      const { sizes, types } = props.theme.components.text;\r\n      return types[props.$type]?.size || sizes[props.$size];\r\n    }};\r\n    font-weight: ${() => {\r\n      const { weights, types } = props.theme.components.text;\r\n      return types[props.$type]?.weight || weights[props.$weight];\r\n    }};\r\n    line-height: ${() => {\r\n      const { lineHeights, types } = props.theme.components.text;\r\n      return types[props.$type]?.lineHeight || lineHeights[props.$size];\r\n    }};\r\n    text-align: ${props.$align};\r\n    text-decoration: ${props.$decoration};\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props)}\r\n  `;\r\n};\r\n\r\nconst TextWrapper = styled(\"p\")`\r\n  ${(props) => css`\r\n    ${textStyles(props)}\r\n  `}\r\n`;\r\n\r\nconst LabelWrapper = styled(\"label\")`\r\n  ${(props) => css`\r\n    display: inline-block;\r\n\r\n    ${textStyles(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  LabelWrapper,\r\n  TextWrapper,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles/spacing\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles/spacing\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: grid;\r\n    grid-template-columns: repeat(${props.children.length}, 1fr);\r\n    grid-column-gap: ${props.$gap};\r\n    grid-row-gap: ${props.$gap};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    @media only screen and (max-width: ${props.$minWidth}) {\r\n      grid-template-columns: repeat(1, 1fr);\r\n    }\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Wrapper } from \"./Columns.styles\";\r\n\r\nexport const Columns = (props) => {\r\n  const { gap, margin, minWidth } = props;\r\n\r\n  return (\r\n    <Wrapper $gap={gap} $margin={margin} $minWidth={minWidth}>\r\n      {props.children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nColumns.propTypes = {\r\n  children: PropTypes.node,\r\n  gap: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  minWidth: PropTypes.string,\r\n};\r\n\r\nColumns.defaultProps = {\r\n  children: null,\r\n  gap: \"24px\",\r\n  margin: \"a-0\",\r\n  minWidth: \"600px\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: ${props.$vAlign};\r\n    display: flex;\r\n    justify-content: ${props.$hAlign};\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"./Flex.styles\";\r\n\r\nexport const Flex = (props) => {\r\n  const { hAlign, margin, vAlign } = props;\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={margin} $hAlign={hAlign} $vAlign={vAlign}>\r\n      {props.children}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nFlex.propTypes = {\r\n  children: PropTypes.node,\r\n  hAlign: PropTypes.oneOf([\r\n    \"center\",\r\n    \"end\",\r\n    \"space-around\",\r\n    \"space-between\",\r\n    \"start\",\r\n  ]),\r\n  margin: PropTypes.string,\r\n  vAlign: PropTypes.oneOf([\"center\", \"end\", \"start\"]),\r\n};\r\n\r\nFlex.defaultProps = {\r\n  children: null,\r\n  hAlign: \"start\",\r\n  margin: \"a-0\",\r\n  vAlign: \"center\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../../../utils/styles\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.alert.bgColors.warning};\r\n    border-radius: 0 0 5px 5px;\r\n    box-shadow: ${props.theme.shadows.level2};\r\n    color: ${props.theme.colors.alert.colors.warning};\r\n    display: flex;\r\n    left: 50%;\r\n    position: absolute;\r\n    top: 100%;\r\n\r\n    ${paddingProperties(props, \"x-10 y-5\")}\r\n  `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../../../utils/styles\";\r\n\r\nconst BottomContentStyles = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-top-color: ${props.theme.colors.black._200};\r\n    border-top-style: solid;\r\n    border-top-width: ${props.theme.components.appLayout.sidebar.border.width};\r\n\r\n    ${paddingProperties(\r\n      props,\r\n      props.theme.components.appLayout.sidebar.bottomContent.padding,\r\n    )}\r\n  `}\r\n`;\r\n\r\nconst SideBarButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    background-color: transparent;\r\n    border: none;\r\n    box-sizing: border-box;\r\n    color: ${props.$isSelectedSection\r\n      ? props.theme.colors.orange._600\r\n      : \"inheret\"};\r\n    display: flex;\r\n    width: ${props.$isExpanded\r\n      ? props.theme.components.appLayout.sidebar.width.expanded\r\n      : props.theme.components.appLayout.sidebar.width.contracted};\r\n\r\n    ${paddingProperties(\r\n      props,\r\n      props.theme.components.appLayout.sidebar.button.padding,\r\n    )}\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SideBarButtonsWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    height: calc(100% - ${props.theme.components.appLayout.sidebar.content.height});\r\n    overflow-y: auto;\r\n\r\n    &::-webkit-scrollbar {\r\n      width: ${props.theme.components.appLayout.scroll.width};\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.appLayout.scroll.radious});\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SideBarStyles = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-right-color: ${props.theme.colors.black._200};\r\n    border-right-style: solid;\r\n    border-right-width: ${props.theme.components.appLayout.sidebar.border\r\n      .width};\r\n    height: 100%;\r\n    position: relative;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  BottomContentStyles,\r\n  SideBarButton,\r\n  SideBarButtonsWrapper,\r\n  SideBarStyles,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useRouter } from \"../../../../../hooks/useRouter\";\r\n\r\nimport { Icon, Text } from \"../../../../../\";\r\n\r\nimport { Styles } from \"./SideBar.styles\";\r\n\r\nexport const SideBar = (props) => {\r\n  const { buttons } = props;\r\n\r\n  const router = useRouter();\r\n\r\n  const [isExpanded, setIsExpanded] = useState(true);\r\n\r\n  const contractedButton = {\r\n    icon: isExpanded ? \"angles-left\" : \"angles-right\",\r\n    label: \"Contraer\",\r\n  };\r\n\r\n  const handleClick = () => setIsExpanded((prev) => !prev);\r\n\r\n  const handleSidebarButtonClick = (to) => {\r\n    router.push(to);\r\n  };\r\n\r\n  const renderButtonContent = (btn, isSelected) => {\r\n    return (\r\n      <>\r\n        <Icon\r\n          color={isSelected ? \"orange_600\" : \"black_900\"}\r\n          icon={btn.icon}\r\n          margin=\"r-8\"\r\n          size=\"sm\"\r\n        />\r\n\r\n        {isExpanded && (\r\n          <Text\r\n            color={isSelected ? \"orange_600\" : \"black_900\"}\r\n            weight=\"semibold\"\r\n          >\r\n            {btn.label}\r\n          </Text>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Styles.SideBarStyles>\r\n      {/* button list */}\r\n      <Styles.SideBarButtonsWrapper>\r\n        {buttons &&\r\n          buttons.map((btn, idx) => {\r\n            const isSelected = router.location.pathname.includes(btn.to);\r\n\r\n            return (\r\n              <Styles.SideBarButton\r\n                $isExpanded={isExpanded}\r\n                $isSelectedSection={isSelected}\r\n                key={`sidebar-button-${idx}`}\r\n                onClick={() => handleSidebarButtonClick(btn.to)}\r\n              >\r\n                {renderButtonContent(btn, isSelected)}\r\n              </Styles.SideBarButton>\r\n            );\r\n          })}\r\n      </Styles.SideBarButtonsWrapper>\r\n\r\n      <Styles.BottomContentStyles>\r\n        <Styles.SideBarButton $isExpanded={isExpanded} onClick={handleClick}>\r\n          {renderButtonContent(contractedButton)}\r\n        </Styles.SideBarButton>\r\n      </Styles.BottomContentStyles>\r\n    </Styles.SideBarStyles>\r\n  );\r\n};\r\n\r\nSideBar.propTypes = {\r\n  buttons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      to: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nSideBar.defaultProps = {\r\n  buttons: null,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../utils/styles\";\r\n\r\nexport const ContentBox = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    box-sizing: border-box;\r\n    flex-grow: 1;\r\n    height: 100%;\r\n    overflow: auto;\r\n    \r\n    ${paddingProperties(\r\n      props,\r\n      props.theme.components.appLayout.content.padding,\r\n    )}\r\n\r\n    &::-webkit-scrollbar {\r\n      width: ${props.theme.components.appLayout.scroll.width};\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: ${props.theme.components.appLayout.scroll.radious});\r\n    }\r\n  `}}\r\n`;\r\n\r\nexport const MainContent = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: flex;\r\n    height: calc(100vh - ${props.theme.components.appLayout.topbar.height});\r\n    width: 100vw;\r\n  `}\r\n`;\r\n\r\nexport const TopBar = styled(\"div\")`\r\n  ${(props) => css`\r\n    box-sizing: border-box;\r\n    color: ${props.theme.colors.black._100};\r\n    background-color: ${props.theme.colors.black._700};\r\n    box-shadow: ${props.theme.shadows.level3};\r\n    height: ${props.theme.components.appLayout.topbar.height};\r\n    position: relative;\r\n    z-index: 100;\r\n    width: 100vw;\r\n\r\n    ${paddingProperties(props)}\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { OfflineBadge } from \"./components/OfflineBadge/OfflineBadge\";\r\nimport { SideBar } from \"./components/SideBar/SideBar\";\r\n\r\nimport { ContentBox, MainContent, TopBar } from \"./AppLayout.styles\";\r\n\r\nexport const AppLayout = (props) => {\r\n  const { sidebar, topbar } = props;\r\n\r\n  const sidebarButtons = sidebar ? sidebar.buttons : null;\r\n\r\n  return (\r\n    <>\r\n      <TopBar $padding=\"x-24 y-8\">\r\n        {topbar ? topbar.content : null}\r\n\r\n        <OfflineBadge />\r\n      </TopBar>\r\n\r\n      <MainContent>\r\n        <SideBar buttons={sidebarButtons} />\r\n\r\n        <ContentBox>{props.children}</ContentBox>\r\n      </MainContent>\r\n    </>\r\n  );\r\n};\r\n\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node,\r\n  sidebar: PropTypes.shape({\r\n    buttons: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\r\n          .isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        to: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n  }),\r\n  topbar: PropTypes.shape({\r\n    content: PropTypes.node,\r\n  }),\r\n};\r\n\r\nAppLayout.defaultProps = {\r\n  children: null,\r\n  sidebar: null,\r\n  topbar: null,\r\n};\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Button } from \"../../../../atoms\";\r\n\r\nimport { Styles } from \"./PaginateButton.styles\";\r\n\r\nexport const PaginateButton = (props) => {\r\n  const { children, kind, onClick } = props;\r\n\r\n  return (\r\n    <Styles.Wrapper>\r\n      <Button fullWidth kind={kind} onClick={onClick}>\r\n        {children}\r\n      </Button>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nPaginateButton.propTypes = {\r\n  children: PropTypes.node,\r\n  kind: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nPaginateButton.defaultProps = {\r\n  children: 0,\r\n  kind: \"outlined\",\r\n  onClick: null,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => `\r\n    align-items: end;\r\n    display: flex;\r\n    justify-content: start;\r\n    \r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","export const createPaginateList = (page, pages, nButtons) => {\r\n  const centerValue = Math.ceil(nButtons / 2);\r\n\r\n  if (pages <= nButtons) {\r\n    //? more buttons than pages.\r\n    return createPagesList(pages);\r\n  } else if (page > centerValue && page <= pages - centerValue) {\r\n    //? ellipsis icon on both sides.\r\n    const cantButtons = nButtons - 4;\r\n    const initValue = page - Math.floor(cantButtons / 2);\r\n\r\n    const list = createPagesList(cantButtons, initValue);\r\n    list.unshift(1, 0);\r\n    list.push(0, pages);\r\n\r\n    return list;\r\n  } else if (page > centerValue) {\r\n    //? ellipsis icon left.\r\n    const list = createPagesList(nButtons - 2, pages - nButtons + 3);\r\n    list.unshift(1, 0);\r\n    return list;\r\n  } else if (page < pages - centerValue) {\r\n    const list = createPagesList(nButtons - 2, 1);\r\n    //? ellipsis icon right.\r\n    list.push(0, pages);\r\n    return list;\r\n  }\r\n};\r\n\r\nconst createPagesList = (cant, initValue = 1) => {\r\n  const list = [];\r\n\r\n  for (let i = 0; i < cant; i++) {\r\n    list.push(initValue + i);\r\n  }\r\n\r\n  return list;\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst getColor = (theme, type) => {\r\n  switch (type) {\r\n    case \"pendingCircle\":\r\n      return theme.colors.black._300;\r\n    case \"checkedCircle\":\r\n    case \"circle\":\r\n    default:\r\n      return theme.colors.orange._600;\r\n  }\r\n};\r\n\r\nconst getBgColor = (theme, type) => {\r\n  switch (type) {\r\n    case \"pendingCircle\":\r\n      return theme.colors.black._300;\r\n    case \"circle\":\r\n      return \"none\";\r\n    case \"checkedCircle\":\r\n    default:\r\n      return theme.colors.orange._600;\r\n  }\r\n};\r\n\r\nexport const Circle = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${getBgColor(props.theme, props.type)};\r\n    border: 3px solid ${getColor(props.theme, props.type)};\r\n    border-radius: 50%;\r\n    color: ${props.theme.colors.black._100};\r\n    display: flex;\r\n    height: ${props.theme.components.stepsBar.circle.diameter[props.size]};\r\n    justify-content: center;\r\n    width: ${props.theme.components.stepsBar.circle.diameter[props.size]};\r\n  `}\r\n`;\r\n\r\nexport const ProgressBarWrapper = styled(\"div\")`\r\n  flex-grow: 1;\r\n  padding: 0px 10px;\r\n`;\r\n\r\nexport const StepsWrapper = styled(\"div\")`\r\n  align-items: center;\r\n  display: flex;\r\n  margin: 0px 60px;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon, ProgressBar } from \"../../../\";\r\n\r\nimport { Circle, ProgressBarWrapper, StepsWrapper } from \"./StepsBar.styles\";\r\n\r\nexport const StepsBar = (props) => {\r\n  const { size, step, steps } = props;\r\n\r\n  const [previousStep, setPreviousStep] = useState(step);\r\n\r\n  const finishStepChange = () => {\r\n    const diff = step - previousStep;\r\n\r\n    if (diff > 0) {\r\n      setPreviousStep((prev) => prev + 1);\r\n    } else if (diff < 0) {\r\n      setPreviousStep((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  const selectTypeCircle = (renderStep) => {\r\n    if (renderStep < step) return \"checkedCircle\";\r\n    if (renderStep > step) return \"pendingCircle\";\r\n\r\n    if (renderStep === step && previousStep > step) return \"checkedCircle\";\r\n    if (renderStep === step && previousStep < step) return \"pendingCircle\";\r\n    if (renderStep === step) return \"circle\";\r\n  };\r\n\r\n  const noShowOldAnaimation = (renderStep) => {\r\n    const diff = step - previousStep;\r\n\r\n    const prueba = !(\r\n      (diff > 0 && renderStep === step) ||\r\n      (diff < 0 && renderStep === step + 1)\r\n    );\r\n\r\n    return prueba;\r\n  };\r\n\r\n  const renderIconInsideCircle = (renderStep) => {\r\n    if (renderStep < step || (renderStep === step && previousStep > step)) {\r\n      return <Icon icon=\"check\" size=\"sm\" />;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const renderStep = (renderStep) => {\r\n    return (\r\n      <React.Fragment key={`step-${renderStep}`}>\r\n        {renderStep !== 1 && (\r\n          <ProgressBarWrapper>\r\n            <ProgressBar\r\n              borderRound\r\n              noShowAnimationOnFirstLoad={noShowOldAnaimation(renderStep)}\r\n              onFinish={finishStepChange}\r\n              size=\"sm\"\r\n              step={renderStep <= step ? 100 : 0}\r\n              style={{ flexGrow: \"1\" }}\r\n            />\r\n          </ProgressBarWrapper>\r\n        )}\r\n\r\n        <Circle size={size} type={selectTypeCircle(renderStep)}>\r\n          {renderIconInsideCircle(renderStep)}\r\n        </Circle>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const renderColumnSteps = () => {\r\n    let stepsArray = [];\r\n\r\n    for (let i = 1; i <= steps; i++) {\r\n      stepsArray.push(renderStep(i));\r\n    }\r\n\r\n    return <StepsWrapper>{stepsArray}</StepsWrapper>;\r\n  };\r\n\r\n  return renderColumnSteps();\r\n};\r\n\r\nStepsBar.propTypes = {\r\n  size: PropTypes.oneOf([\"md\"]),\r\n  steps: PropTypes.number.isRequired,\r\n  step: PropTypes.number,\r\n};\r\n\r\nStepsBar.defaultProps = {\r\n  size: \"md\",\r\n  steps: 5,\r\n  step: 1,\r\n};\r\n"],"names":[],"sourceRoot":""}