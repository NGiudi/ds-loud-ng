{"version":3,"file":"773.dea97e05.iframe.bundle.js","mappings":";AAYA;;AAEA;AAGA;AAGA;AAGA;AACA;;AAEA;AACA;AACA;AAIA;AACA;;AAWA;AANA;;;;AAIA;;AAEA;ACnCA;;AAEA;;;AAGA;AACA;;ACRA;;;ACwHA;AApHA;AAoHA;AA5GA;AACA;;;;AAIA;;;;;AAuGA;AA/FA;;;AAGA;;AAEA;;;;;;AAMA;;AAEA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;AAmEA;AA7DA;;AAEA;;;AAGA;;;;;;;AAOA;;AAEA;;;AAGA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AAkCA;AA3BA;;;;;;;;;;AAUA;;AAEA;;;AAGA;;;;AAIA;;;;;AAKA;;;;ACrHA;ACAA;ACFA;ACAA;;;ACEA;ACJA;;;;AAIA;;;;;;;;;ACFA;ACFA;;AAEA;;;;;;AAMA;AACA;;AAEA;AAGA;AACA;;;;;AAKA;AACA;;ACjBA;;ACHA;;;ACGA;ACEA;AACA;AACA;AACA;;AAeA;AAVA;;AAEA;;AAEA;;AAEA;;AAEA;;ACnBA;ACDA;;;;;;;;;;AAUA;;;AAGA;;;;AAIA;;;;AAIA;;AAEA;;;ACnBA;ACCA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;ACZA;ACAA;AACA;;AAEA;;AAEA;;AAEA;;ACPA;ACEA;AACA;AACA;AACA;AACA;;AA4CA;AAvCA;AACA;;AAEA;;AAoCA;;;;AA5BA;AACA;;AAEA;;;AAyBA;AAnBA;;AAEA;;;;;;;;AAQA;AACA;;AAQA;AAHA;AACA;;AC/CA;;AC+BA;;;;AAAA;AAxBA;AACA;;AAuBA;;;;;;;;;;AAAA;AANA;;AAEA;AACA;;;AC3BA;ACJA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;AACA;;ACXA;ACAA;AACA;;AAEA;;AAaA;AARA;AACA;AACA;;;;AAIA;;ACdA;ACFA;AACA;AACA;;;;;;AAMA;;;;;;;;;;;;;AAaA;;;;AAIA;;;AA4BA;;AAAA;AAlBA;;AAEA;AACA;;;;;;;AAOA;;;AAQA;;;AC7CA;ACRA;;;;;AAKA;;;ACDA;ACFA;AACA;;ACKA;ACNA;AAmCA;AA7BA;AA6BA;AAHA;AC9BA;ACFA;AA4BA;AArBA;AAqBA;AAHA;ACvBA;ACFA;AACA;;;;AAIA;;AAiCA;AA5BA;;;AAGA;;;;AAMA;;;AAGA;;;AAgBA;AAVA;AACA;;AASA;AAJA;AACA;AACA;;AClCA;ACAA;AACA;;;;;;;;;;;;;;AAcA;;;;AAIA;;;AAGA;;ACpBA;ACJA;AACA;;;ACDA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;ACRA;ACAA;AACA;;AAEA;AACA;;AAEA;;ACNA;ACAA;;AAEA;;AAEA;AACA;;;;;;AAMA;;;ACbA;AACA;;;;;;;AASA;;;AAiBA;;;;;;AAAA;;;;ACrBA;ACGA;AACA;;ACZA;;ADgBA;;AAsEA;AAjEA;;;;;;AAMA;;AAEA;;;AAGA;;;;;;;;AAsDA;AA3CA;AACA;AACA;;;;;;;;;;;AAyCA;AA3BA;AC3DA;;;;;;;ADmEA;;;;AAIA;;;;AAeA;AARA;AACA;AACA;;;;;;AE1EA;ACAA;AACA;;;;;;AAMA;;;;;;;AAOA;;;;AAIA;;;;AAIA;;AF5BA;;AEkCA;AAGA;;AAEA;AACA;AACA;AFzCA;;;;;AE+CA;;ACxCA;;;;;;;;ACgBA;AAXA;AACA;;;;;;;;;;ACAA;ACXA;;AAEA;;;;;;AAMA;;;AAGA;;;;;;ACHA;ACNA;;;;;;;;;;;;;;AAcA;;;;;AAKA;;;;AAUA;AAHA;AACA;;ACvBA;ACNA;;;;AAKA;;AAiBA;AAXA;;;AAIA;;;;;;AAOA;;;AClBA;ACFA;ACLA;AC4BA;;AAxBA;AAAA;;AA6BA;;;;;AA7BA;AAmCA;;;AAKA;AAGA;;;;AAIA;;AC5CA","sources":["webpack://ds-loud-ng/./src/components/atoms/Text/Text.styles.js","webpack://ds-loud-ng/./src/components/atoms/Badge/Badge.styles.js","webpack://ds-loud-ng/./src/components/atoms/Badge/Badge.jsx","webpack://ds-loud-ng/./src/components/atoms/Button/Button.styles.js","webpack://ds-loud-ng/./src/components/atoms/Checkbox/Checkbox.styles.js","webpack://ds-loud-ng/./src/components/atoms/Checkbox/Checkbox.jsx","webpack://ds-loud-ng/./src/components/atoms/Divider/Divider.styles.js","webpack://ds-loud-ng/./src/components/atoms/Divider/Divider.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/Dropdown.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownItem/DropdownItem.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownItem/DropdownItem.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownPanel/DropdownPanel.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownPanel/DropdownPanel.jsx","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownToogle/DropdownToogle.styles.js","webpack://ds-loud-ng/./src/components/atoms/Dropdown/components/DropdownToogle/DropdownToogle.jsx","webpack://ds-loud-ng/./src/components/atoms/Icon/Icon.styles.js","webpack://ds-loud-ng/./src/components/atoms/Icon/Icon.jsx","webpack://ds-loud-ng/./src/components/atoms/IconButton/IconButton.styles.js","webpack://ds-loud-ng/./src/components/atoms/IconButton/IconButton.jsx","webpack://ds-loud-ng/./src/components/atoms/Image/components/ImagePlaceholder/ImagePlaceholder.styles.js","webpack://ds-loud-ng/./src/components/atoms/Image/components/ImagePlaceholder/ImagePlaceholder.jsx","webpack://ds-loud-ng/./src/components/atoms/Image/Image.styles.js","webpack://ds-loud-ng/./src/components/atoms/Image/Image.jsx","webpack://ds-loud-ng/./src/components/atoms/Input/Input.styles.js","webpack://ds-loud-ng/./src/components/atoms/Input/Input.jsx","webpack://ds-loud-ng/./src/components/atoms/Modal/Modal.styles.js","webpack://ds-loud-ng/./src/components/atoms/Modal/Modal.jsx","webpack://ds-loud-ng/./src/components/atoms/Panel/Panel.styles.js","webpack://ds-loud-ng/./src/components/atoms/Panel/Panel.jsx","webpack://ds-loud-ng/./src/components/atoms/ProgressBar/ProgressBar.styles.js","webpack://ds-loud-ng/./src/components/atoms/ProgressBar/components/Bar.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectContent/SelectContent.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectContent/SelectContent.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectOption/SelectOption.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/components/SelectOption/SelectOption.jsx","webpack://ds-loud-ng/./src/components/atoms/Select/Select.styles.js","webpack://ds-loud-ng/./src/components/atoms/Select/Select.jsx","webpack://ds-loud-ng/./src/components/atoms/Table/components/DesktopTable/DesktopTable.styles.js","webpack://ds-loud-ng/./src/components/atoms/Table/components/DesktopTable/DesktopTable.jsx","webpack://ds-loud-ng/./src/components/atoms/Table/components/PhoneTable/PhoneTable.styles.js","webpack://ds-loud-ng/./src/components/atoms/Table/components/PhoneTable/PhoneTable.jsx","webpack://ds-loud-ng/./src/components/atoms/Tabs/Tabs.styles.js","webpack://ds-loud-ng/./src/components/atoms/Tabs/Tabs.jsx","webpack://ds-loud-ng/./src/components/atoms/TextArea/TextArea.styles.js","webpack://ds-loud-ng/./src/components/atoms/TextArea/TextArea.jsx","webpack://ds-loud-ng/./src/components/layout/Box/Box.styles.js","webpack://ds-loud-ng/./src/components/layout/Columns/Columns.styles.js","webpack://ds-loud-ng/./src/components/layout/Columns/Columns.jsx","webpack://ds-loud-ng/./src/components/layout/Flex/Flex.styles.js","webpack://ds-loud-ng/./src/components/layout/Flex/Flex.jsx","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/OfflineBadge/OfflineBadge.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/ProfileAvatar/ProfileAvatar.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/ProfileAvatar/ProfileAvatar.jsx","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/SideBar/SideBar.styles.js","webpack://ds-loud-ng/./src/assets/styles/app_layout.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/components/SideBar/components/SidebarButton.jsx","webpack://ds-loud-ng/./src/components/molecules/AppLayout/AppLayout.styles.js","webpack://ds-loud-ng/./src/components/molecules/AppLayout/AppLayout.jsx","webpack://ds-loud-ng/./src/components/molecules/Dropzone/components/UploadFileBox/UploadFileBox.styles.js","webpack://ds-loud-ng/./src/components/molecules/Dropzone/components/UploadFileBox/UploadFileBox.jsx","webpack://ds-loud-ng/./src/components/molecules/Dropzone/components/FileItem/FileItem.styles.js","webpack://ds-loud-ng/./src/components/molecules/Dropzone/components/FileItem/FileItem.jsx","webpack://ds-loud-ng/./src/components/molecules/Dropzone/Dropzone.styles.js","webpack://ds-loud-ng/./src/components/molecules/Dropzone/components/FilesList/FilesList.jsx","webpack://ds-loud-ng/./src/components/molecules/ImageGroup/ImageGroup.styles.jsx","webpack://ds-loud-ng/./src/components/molecules/Pagination/components/PaginateButton/PaginateButton.jsx","webpack://ds-loud-ng/./src/components/molecules/Pagination/Pagination.styles.js","webpack://ds-loud-ng/./src/components/molecules/Pagination/utils/pages.js","webpack://ds-loud-ng/./src/components/molecules/StpesBar/StepsBar.styles.js","webpack://ds-loud-ng/./src/components/molecules/StpesBar/StepsBar.jsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nimport {\r\n  getColor,\r\n  marginProperties,\r\n  paddingProperties,\r\n} from \"../../../utils/styles\";\r\n\r\nimport { TEXT_TYPES } from \"../../../assets/styles/text\";\r\n\r\nconst textStyles = (props) => {\r\n  return css`\r\n    color: ${getColor(props.theme, props.$color)};\r\n    font-family: \"Source Sans 3\", sans-serif;\r\n    font-size: ${() => {\r\n      return TEXT_TYPES[props.$type]?.size;\r\n    }};\r\n    font-weight: ${() => {\r\n      return TEXT_TYPES[props.$type]?.weight;\r\n    }};\r\n    line-height: ${() => {\r\n      return TEXT_TYPES[props.$type]?.lineHeight;\r\n    }};\r\n    text-align: ${props.$align};\r\n    text-decoration: ${props.$decoration};\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props)}\r\n  `;\r\n};\r\n\r\nconst TextWrapper = styled(\"p\")`\r\n  ${(props) => css`\r\n    ${textStyles(props)}\r\n  `}\r\n`;\r\n\r\nconst LabelWrapper = styled(\"label\")`\r\n  ${(props) => css`\r\n    display: inline-block;\r\n    user-select: none;\r\n\r\n    ${textStyles(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  LabelWrapper,\r\n  TextWrapper,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport {\r\n  getColor,\r\n  marginProperties,\r\n  paddingProperties,\r\n} from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: inline-block;\r\n    background-color: ${getColor(props.theme, props.$color)};\r\n    border-radius: 4px;\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props, \"x-8 y-4\")}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Text } from \"../Text/Text\";\r\n\r\nimport { Styles } from \"./Badge.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  color: \"orange_700\",\r\n  id: \"\",\r\n  margin: \"a-0\",\r\n};\r\n\r\nexport const Badge = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper $color={attrs.color} id={attrs.id} $margin={attrs.margin}>\r\n      <Text type=\"bodySemibold\">{attrs.children}</Text>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nBadge.propTypes = {\r\n  children: PropTypes.node,\r\n  color: PropTypes.string,\r\n  id: PropTypes.string,\r\n  margin: PropTypes.string,\r\n};\r\n","import styled, { css, keyframes } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\n//? loading animation\r\nconst rotate = keyframes`\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n`;\r\n\r\nconst ContentWrapper = styled(\"span\")`\r\n  ${(props) => `   \r\n    align-items: center;\r\n    display: flex;\r\n    visibility: ${props.$loading ? \"hidden\" : \"visible\"};\r\n  `}\r\n`;\r\n\r\nconst LoaderWrapper = styled(\"span\")`\r\n  ${(props) => css`\r\n    animation-name: ${rotate};\r\n    animation-duration: 1.5s;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: ease-in-out;\r\n    display: ${props.$loading ? \"block\" : \"none\"};\r\n    left: calc(50% - 10px); /* TODO: 10px = half icon size */\r\n    position: absolute;\r\n    top: calc(50% - 10px); /* TODO: 10px = half icon size */\r\n  `}\r\n`;\r\n\r\nconst OutlinedButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border: 1px solid ${props.theme.colors.orange._600};\r\n    border-radius: 4px;\r\n    color: ${props.theme.colors.orange._600};\r\n    display: inline-flex;\r\n    height: 38px;\r\n    justify-content: center;\r\n    padding: 8px 12px;\r\n    position: relative;\r\n    width: ${props.$fullWidth ? \"100%\" : \"auto\"};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      border-color: ${!props.$loading && props.theme.colors.orange._800};\r\n      color: ${!props.$loading && props.theme.colors.orange._800};\r\n    }\r\n\r\n    &:active:enabled {\r\n      border-color: ${!props.$loading && props.theme.colors.orange._900};\r\n      color: ${!props.$loading && props.theme.colors.orange._900};\r\n    }\r\n\r\n    &:disabled {\r\n      border-color: ${props.theme.colors.black._400};\r\n      box-shadow: none;\r\n      color: ${props.theme.colors.black._400};\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SolidButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.orange._600};\r\n    border: none;\r\n    border-radius: 4px;\r\n    box-shadow: ${props.theme.shadows.level1};\r\n    color: white;\r\n    display: inline-flex;\r\n    height: 38px;\r\n    justify-content: center;\r\n    padding: 8px 12px;\r\n    position: relative;\r\n    width: ${props.$fullWidth ? \"100%\" : \"auto\"};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.orange._800};\r\n      box-shadow: ${!props.$loading && props.theme.shadows.level2};\r\n    }\r\n\r\n    &:active:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.orange._900};\r\n      box-shadow: ${!props.$loading && props.theme.shadows.level3};\r\n    }\r\n\r\n    &:disabled {\r\n      background-color: ${props.theme.colors.black._400};\r\n      box-shadow: none;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst TextButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-radius: 4px;\r\n    display: inline-flex;\r\n    height: 38px;\r\n    justify-content: center;\r\n    padding: 8px 12px;\r\n    position: relative;\r\n    width: ${props.$fullWidth ? \"100%\" : \"auto\"};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.black._200};\r\n    }\r\n\r\n    &:active:enabled {\r\n      background-color: ${!props.$loading && props.theme.colors.black._300};\r\n    }\r\n\r\n    &:disabled {\r\n      box-shadow: none;\r\n      color: ${props.theme.colors.black._400};\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ContentWrapper,\r\n  LoaderWrapper,\r\n  OutlinedButton,\r\n  SolidButton,\r\n  TextButton,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { Field } from \"formik\";\r\n\r\nimport checkImage from \"../../../../public/images/check-mark.svg\";\r\n\r\nconst CustomCheckbox = styled(Field)`\r\n  ${(props) => `\r\n    appearance: none;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: 60%;\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: 4px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    box-sizing: border-box;\r\n    flex-shrink: 0;\r\n    height: 16px;\r\n    margin: 1px 8px 0 0;\r\n    width: 16px;\r\n\r\n    &:not(:disabled) {\r\n      &:checked {\r\n        background-color: ${props.theme.colors.orange._500};\r\n        background-image: url(${checkImage});\r\n        border-color: ${props.theme.colors.orange._500};\r\n      }\r\n\r\n      &:hover&:checked {\r\n        background-color: ${props.theme.colors.orange._700};\r\n        border-color: ${props.theme.colors.orange._700};\r\n      }\r\n\r\n      &:hover&:not(:checked) {\r\n        border-color: ${props.theme.colors.black._700};\r\n      }\r\n    }\r\n    \r\n    &:disabled {\r\n      &:checked {\r\n        background-color: ${props.theme.colors.black._400};\r\n        background-image: url(${checkImage});\r\n        border-color: ${props.theme.colors.black._400};\r\n      }\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  CustomCheckbox,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Flex, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Checkbox.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  id: \"\",\r\n  description: \"\",\r\n  disabled: false,\r\n  label: \"\",\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n};\r\n\r\nexport const Checkbox = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const textColor = attrs.disabled ? \"black_500\" : \"black_900\";\r\n\r\n  return (\r\n    <Flex margin={attrs.margin} vAlign=\"start\">\r\n      <Styles.CustomCheckbox\r\n        disabled={attrs.disabled}\r\n        id={attrs.id}\r\n        name={attrs.name}\r\n        type=\"checkbox\"\r\n      />\r\n\r\n      <div style={{ flexGrow: \"0\" }}>\r\n        <Text\r\n          as=\"label\"\r\n          color={textColor}\r\n          htmlFor={attrs.id}\r\n          margin=\"b-4\"\r\n          type=\"bodySemibold\"\r\n        >\r\n          {attrs.label}\r\n        </Text>\r\n\r\n        {attrs.description && (\r\n          <Text color={textColor} type=\"captionRegular\">\r\n            {attrs.description}\r\n          </Text>\r\n        )}\r\n      </div>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  id: PropTypes.string,\r\n  description: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  label: PropTypes.string.isRequired,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { getColor, marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => `  \r\n    border: none;\r\n    background-color: ${getColor(props.theme, props.$color)};\r\n    height: ${props.height || \"1px\"};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"./Divider.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  color: \"black_300\",\r\n  height: \"\",\r\n  margin: \"a-0\",\r\n};\r\n\r\nexport const Divider = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper\r\n      $color={attrs.color}\r\n      height={attrs.height}\r\n      $margin={attrs.margin}\r\n    />\r\n  );\r\n};\r\n\r\nDivider.propTypes = {\r\n  color: PropTypes.string,\r\n  height: PropTypes.string,\r\n  margin: PropTypes.string,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useOuterClick } from \"../../../hooks/useOuterClick\";\r\n\r\nimport { Styles } from \"./Dropdown.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  name: null,\r\n  onSelect: () => {},\r\n};\r\n\r\n//TODO: Agregar margin a este componente.\r\nexport const Dropdown = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const [optionSelected, setOptionSelected] = useState(null);\r\n  const [showPanel, setShowPanel] = useState(false);\r\n\r\n  const innerRef = useOuterClick(() => {\r\n    if (showPanel) toogleShowPanel();\r\n  });\r\n\r\n  const toogleShowPanel = () => {\r\n    setShowPanel((prev) => !prev);\r\n  };\r\n\r\n  const handleSelect = (value, name) => {\r\n    toogleShowPanel();\r\n\r\n    if (value !== optionSelected) {\r\n      attrs.onSelect && attrs.onSelect(value, name);\r\n      setOptionSelected(value);\r\n    }\r\n  };\r\n\r\n  const getPanel = React.Children.toArray(attrs.children)[1];\r\n  const getToggle = React.Children.toArray(attrs.children)[0];\r\n\r\n  return (\r\n    <Styles.DropdownWrapper ref={innerRef}>\r\n      {React.cloneElement(getToggle, {\r\n        onClick: toogleShowPanel,\r\n        openPanel: showPanel,\r\n      })}\r\n\r\n      {React.cloneElement(getPanel, {\r\n        name: attrs.name,\r\n        onSelect: handleSelect,\r\n        showPanel,\r\n      })}\r\n    </Styles.DropdownWrapper>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ItemWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    width: 200px;\r\n\r\n    &:hover:not([disabled]) {\r\n      background-color: ${props.theme.colors.black._200};\r\n      overflow: hiddem;\r\n    }\r\n\r\n    &[disabled] {\r\n      cursor: not-allowed;\r\n      filter: opacity(50%);\r\n    }\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ItemWrapper } from \"./DropdownItem.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  disabled: false,\r\n  name: null,\r\n  onSelect: () => {},\r\n  value: null,\r\n};\r\n\r\nexport const DropdownItem = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!attrs.disabled) {\r\n      attrs.onSelect && attrs.onSelect(attrs.value, attrs.name);\r\n    }\r\n  };\r\n\r\n  return <ItemWrapper onClick={handleClick} {...attrs} />;\r\n};\r\n\r\nDropdownItem.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  value: PropTypes.any,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const TriangleWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-bottom: 10px solid transparent;\r\n    border-left: 10px solid ${props.theme.colors.alert.bgColors.neutral};\r\n    border-top: 10px solid transparent;\r\n    position: absolute;\r\n    top: -5px;\r\n    transform: rotate(-90deg);\r\n\r\n    ${props.direction === \"right\" && \"left: 10px;\"}\r\n    ${props.direction === \"left\" && \"right: 35px;\"}\r\n  `};\r\n`;\r\n\r\nexport const PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: ${props.$showPanel ? \"block\" : \"none\"};\r\n    position: absolute;\r\n    top: 100%;\r\n    width: 200px;\r\n\r\n    ${props.direction === \"right\" && \"left: 0;\"}\r\n    ${props.direction === \"left\" && \"right: 0;\"}\r\n  `};\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Panel } from \"../../../../../\";\r\n\r\nimport { PanelWrapper, TriangleWrapper } from \"./DropdownPanel.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  direction: \"right\",\r\n  name: null,\r\n  onSelect: () => {},\r\n  showPanel: false,\r\n};\r\n\r\nexport const DropdownPanel = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <PanelWrapper direction={attrs.direction} $showPanel={attrs.showPanel}>\r\n      <Panel margin=\"t-8\" padding=\"y-4 x-0\">\r\n        <TriangleWrapper direction={attrs.direction} />\r\n        {attrs.children.map((item, index) => {\r\n          return React.cloneElement(item, {\r\n            key: `listItem-${index + 1}`,\r\n            name: attrs.name,\r\n            onSelect: attrs.onSelect,\r\n          });\r\n        })}\r\n      </Panel>\r\n    </PanelWrapper>\r\n  );\r\n};\r\n\r\nDropdownPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  direction: PropTypes.oneOf([\"left\", \"right\"]),\r\n  name: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  showPanel: PropTypes.bool,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ToogleWrapper = styled(\"div\")`\r\n  display: inline-block;\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon } from \"../../../../../\";\r\n\r\nimport { ContentWrapper, ToogleWrapper } from \"./DropdownToogle.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  onClick: () => {},\r\n  openPanel: false,\r\n};\r\n\r\nexport const DropdownToogle = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const icon = attrs.openPanel ? \"angle-up\" : \"angle-down\";\r\n\r\n  return (\r\n    <ToogleWrapper onClick={attrs.onClick}>\r\n      <ContentWrapper>\r\n        {attrs.children}\r\n        <Icon icon={icon} margin=\"l-4\" size=\"sm\" />\r\n      </ContentWrapper>\r\n    </ToogleWrapper>\r\n  );\r\n};\r\n\r\nDropdownToogle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClick: PropTypes.func,\r\n  openPanel: PropTypes.bool,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { getColor, marginProperties } from \"../../../utils/styles\";\r\n\r\nimport { ICON_SIZES, ICON_WRAPPER_SIZES } from \"../../../assets/styles/icon\";\r\n\r\nconst IconItem = styled(FontAwesomeIcon)`\r\n  ${(props) => css`\r\n    font-size: ${ICON_SIZES[props.$customsize]};\r\n    max-height: ${ICON_SIZES[props.$customsize]};\r\n    max-widt: ${ICON_SIZES[props.$customsize]};\r\n  `}\r\n`;\r\n\r\nconst IconWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    color: ${getColor(props.theme, props.$color)};\r\n    display: inline-flex;\r\n    height: ${ICON_WRAPPER_SIZES[props.size]};\r\n    justify-content: center;\r\n    width: ${ICON_WRAPPER_SIZES[props.size]};\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  IconItem,\r\n  IconWrapper,\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Styles } from \"./Icon.styles\";\r\n\r\nimport { ICON_PROP_TYPES } from \"../../../constants/prop_types\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  color: \"black_700\",\r\n  icon: \"home\",\r\n  margin: \"a-0\",\r\n  onClick: () => {},\r\n  size: \"md\",\r\n  spin: false,\r\n};\r\n\r\nexport const Icon = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Styles.IconWrapper\r\n      $color={attrs.color}\r\n      $margin={attrs.margin}\r\n      onClick={attrs.onClick}\r\n      size={attrs.size}\r\n    >\r\n      <Styles.IconItem\r\n        $customsize={attrs.size}\r\n        icon={attrs.icon}\r\n        spin={attrs.spin}\r\n      />\r\n    </Styles.IconWrapper>\r\n  );\r\n};\r\n\r\nIcon.propTypes = ICON_PROP_TYPES;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst IconButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    height: 38px;\r\n    justify-content: center;\r\n    width: 38px;\r\n\r\n    ${marginProperties(props)}\r\n\r\n    &:hover:enabled {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &:active:enabled {\r\n      background-color: ${!props.loading && props.theme.colors.black._300};\r\n    }\r\n\r\n    &:disabled {\r\n      border-color: ${props.theme.colors.black._400};\r\n      box-shadow: none;\r\n      color: ${props.theme.colors.black._400};\r\n    }\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  IconButton,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon } from \"../../../\";\r\n\r\nimport { Styles } from \"./IconButton.styles\";\r\n\r\nimport { ICON_PROP_TYPES } from \"../../../constants/prop_types\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  disabled: false,\r\n  icon: {\r\n    color: \"black_900\",\r\n    icon: \"home\",\r\n    size: \"sm\",\r\n  },\r\n  id: null,\r\n  margin: \"a-0\",\r\n  onClick: () => {},\r\n  type: \"button\",\r\n};\r\n\r\nexport const IconButton = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n    icon: {\r\n      ...DEFAULT_PROPS.icon,\r\n      ...props.icon,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Styles.IconButton\r\n      disabled={attrs.disabled}\r\n      id={attrs.id}\r\n      $margin={attrs.margin}\r\n      onClick={attrs.onClick}\r\n      type={attrs.type}\r\n    >\r\n      <Icon\r\n        {...attrs.icon}\r\n        color={attrs.disabled ? \"black_500\" : attrs.icon.color}\r\n      />\r\n    </Styles.IconButton>\r\n  );\r\n};\r\n\r\nIconButton.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.shape(ICON_PROP_TYPES),\r\n  id: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  type: PropTypes.oneOf([\"button\", \"submit\"]),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nimport {\r\n  IMAGE_HEIGHTS,\r\n  IMAGE_WIDTHS,\r\n} from \"../../../../../assets/styles/image\";\r\n\r\nconst IconPlaceholder = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.orange._600};\r\n    border-radius: ${props.$type === \"round\" ? \"50%\" : \"0\"};\r\n    display: inline-flex;\r\n    height: ${IMAGE_HEIGHTS[props.$type][props.$size]};\r\n    justify-content: center;\r\n    width: ${IMAGE_WIDTHS[props.$type][props.$size]};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  IconPlaceholder,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon, Text } from \"../../../../..\";\r\n\r\nimport { Styles } from \"./ImagePlaceholder.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  margin: \"a-0\",\r\n  placeholder: \"\",\r\n  size: \"md\",\r\n  type: \"square\",\r\n};\r\n\r\nexport const ImagePlaceholder = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Styles.IconPlaceholder\r\n      $margin={attrs.margin}\r\n      $size={attrs.size}\r\n      $type={attrs.type}\r\n    >\r\n      {attrs.placeholder ? (\r\n        <Text color=\"black_100\" type=\"captionSemibold\">\r\n          {attrs.placeholder.charAt(0).toUpperCase()}\r\n        </Text>\r\n      ) : (\r\n        <Icon color=\"black_100\" icon=\"camera\" size={attrs.size} />\r\n      )}\r\n    </Styles.IconPlaceholder>\r\n  );\r\n};\r\n\r\nImagePlaceholder.propTypes = {\r\n  margin: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.oneOf([\"avatar\", \"lg\", \"md\", \"sm\"]),\r\n  type: PropTypes.oneOf([\"round\", \"square\"]),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nimport { IMAGE_HEIGHTS, IMAGE_WIDTHS } from \"../../../assets/styles/image\";\r\n\r\nconst ImageStyles = styled(\"img\")`\r\n  ${(props) => css`\r\n    border-radius: ${props.$type === \"round\" ? \"50%\" : \"0px\"};\r\n    display: block;\r\n    height: ${IMAGE_HEIGHTS[props.$type][props.$size]};\r\n    object-fit: cover;\r\n    width: ${IMAGE_WIDTHS[props.$type][props.$size]};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  ImageStyles,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ImagePlaceholder } from \"./components\";\r\n\r\nimport { Styles } from \"./Image.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  alt: \"\",\r\n  img: \"\",\r\n  margin: \"a-0\",\r\n  placeholder: \"\",\r\n  size: \"md\",\r\n  type: \"square\",\r\n};\r\n\r\nexport const Image = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  if (!attrs.img) {\r\n    return (\r\n      <ImagePlaceholder\r\n        margin={attrs.margin}\r\n        placeholder={attrs.placeholder}\r\n        size={attrs.size}\r\n        type={attrs.type}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Styles.ImageStyles\r\n      alt={attrs.alt}\r\n      $margin={attrs.margin}\r\n      $size={attrs.size}\r\n      src={attrs.img}\r\n      $type={attrs.type}\r\n    />\r\n  );\r\n};\r\n\r\nImage.propTypes = {\r\n  alt: PropTypes.string,\r\n  img: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  size: PropTypes.oneOf([\"avatar\", \"lg\", \"md\", \"sm\"]),\r\n  type: PropTypes.oneOf([\"round\", \"square\"]),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { ErrorMessage, Field } from \"formik\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nimport { TEXT_TYPES } from \"../../../assets/styles/text\";\r\n\r\nconst Error = styled(ErrorMessage)`\r\n  ${(props) => css`\r\n    color: ${props.theme.colors.alert.colors.error};\r\n    font-size: ${TEXT_TYPES.bodyRegular.size};\r\n    font-weight: ${TEXT_TYPES.bodyRegular.weight};\r\n    line-height: ${TEXT_TYPES.bodyRegular.lineHeight};\r\n  `};\r\n`;\r\n\r\nconst ErrorWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    height: ${TEXT_TYPES.bodyRegular.lineHeight};\r\n\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nconst InputStyles = styled(Field)`\r\n  background-color: transparent;\r\n  border: none;\r\n  flex-grow: 1;\r\n  font-size: ${TEXT_TYPES.captionRegular.size};\r\n  font-weight: ${TEXT_TYPES.captionRegular.weight};\r\n  height: 24px;\r\n  line-height: ${TEXT_TYPES.captionRegular.lineHeight};\r\n  outline: none;\r\n  padding: 0;\r\n`;\r\n\r\nconst InputWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: 6px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    width: 100%;\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props, \"x-6 y-2\")}\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Error,\r\n  ErrorWrapper,\r\n  InputStyles,\r\n  InputWrapper,\r\n  Wrapper,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ShowPasswordButton } from \"./components\";\r\nimport { Icon, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Input.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  autoComplete: \"off\",\r\n  autoFocus: false,\r\n  description: \"\",\r\n  disabled: false,\r\n  icon: null,\r\n  id: null,\r\n  innerRef: null,\r\n  label: \"\",\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n  onKeyPress: () => {},\r\n  placeholder: \"\",\r\n  readOnly: false,\r\n  reference: null,\r\n  type: \"text\",\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const showPasswordValue = () => {\r\n    setShowPassword((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={attrs.margin}>\r\n      {!!attrs.label && (\r\n        <Text as=\"label\" htmlFor={attrs.id} margin=\"b-4\" type=\"bodySemibold\">\r\n          {attrs.label}\r\n        </Text>\r\n      )}\r\n\r\n      {!!attrs.description && (\r\n        <Text color=\"black_400\" margin=\"b-4\" type=\"captionRegular\">\r\n          {attrs.description}\r\n        </Text>\r\n      )}\r\n\r\n      <Styles.InputWrapper ref={attrs.reference}>\r\n        {/* left icon */}\r\n        {!!attrs.icon && <Icon icon={attrs.icon} margin=\"r-8\" size=\"sm\" />}\r\n\r\n        <Styles.InputStyles\r\n          autoComplete={attrs.autoComplete}\r\n          autoFocus={attrs.autoFocus}\r\n          id={attrs.id}\r\n          disabled={attrs.disabled}\r\n          innerRef={attrs.innerRef}\r\n          name={attrs.name}\r\n          onKeyPress={attrs.onKeyPress}\r\n          placeholder={attrs.placeholder}\r\n          readOnly={attrs.readOnly}\r\n          type={showPassword ? \"text\" : attrs.type}\r\n        />\r\n\r\n        {attrs.type === \"password\" && (\r\n          <ShowPasswordButton onClick={showPasswordValue} show={showPassword} />\r\n        )}\r\n      </Styles.InputWrapper>\r\n\r\n      {/* error message */}\r\n      <Styles.ErrorWrapper $margin=\"l-4 t-4\">\r\n        <Styles.Error component=\"div\" name={attrs.name} />\r\n      </Styles.ErrorWrapper>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  autoComplete: PropTypes.string,\r\n  autoFocus: PropTypes.bool,\r\n  description: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.string,\r\n  id: PropTypes.string,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\r\n  label: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  onKeyPress: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  readOnly: PropTypes.bool,\r\n  reference: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\r\n  type: PropTypes.oneOf([\"number\", \"password\", \"text\"]),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../utils/styles/spacing\";\r\n\r\nconst ButtonsWrapper = styled(\"div\")`\r\n  text-align: right;\r\n`;\r\n\r\nconst CloseBtnWrapper = styled(\"div\")`\r\n  position: absolute;\r\n  right: 12px;\r\n  top: 12px;\r\n`;\r\n\r\nconst ContentBox = styled(\"div\")`\r\n  ${(props) => css`\r\n    padding: ${paddingProperties(props)};\r\n  `}\r\n`;\r\n\r\nconst Overlay = styled(\"div\")`\r\n  align-items: center;\r\n  backdrop-filter: blur(1px);\r\n  background-color: rgba(0, 0, 0, 0.35); //TODO: agregar color al theme.\r\n  display: flex;\r\n  height: 100vh;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    margin: auto;\r\n    max-width: ${props.width};\r\n    padding: ${paddingProperties(props, \"x-16 y-0\")};\r\n    width: 100%;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ButtonsWrapper,\r\n  CloseBtnWrapper,\r\n  ContentBox,\r\n  Overlay,\r\n  PanelWrapper,\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useKeyboardActions } from \"../../../hooks/useKeyboardActions\";\r\n\r\nimport { Button, IconButton, Panel } from \"../../../\";\r\n\r\nimport { Styles } from \"./Modal.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  cancelButton: {\r\n    hide: false,\r\n    onClick: () => {},\r\n    text: \"Cancelar\",\r\n  },\r\n  children: null,\r\n  confirmButton: {\r\n    hide: false,\r\n    onClick: () => {},\r\n    text: \"Continuar\",\r\n  },\r\n  onClose: () => {},\r\n  show: false,\r\n  width: \"auto\",\r\n};\r\n\r\nexport const Modal = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n    cancelButton: {\r\n      ...DEFAULT_PROPS.cancelButton,\r\n      ...props.cancelButton,\r\n    },\r\n    confirmButton: {\r\n      ...DEFAULT_PROPS.confirmButton,\r\n      ...props.confirmButton,\r\n    },\r\n  };\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const showModalRef = useRef(false);\r\n\r\n  const handleCancel = () => {\r\n    if (showModalRef.current) {\r\n      attrs.cancelButton.onClick();\r\n      attrs.onClose();\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (showModalRef.current) {\r\n      attrs.onClose();\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    if (showModalRef.current) {\r\n      attrs.confirmButton.onClick();\r\n      attrs.onClose();\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  useKeyboardActions({\r\n    onClose: handleClose,\r\n    onConfirm: handleConfirm,\r\n  });\r\n\r\n  //? When the show is modified through the props, the internal state is updated.\r\n  useEffect(() => {\r\n    setShowModal(attrs.show);\r\n  }, [attrs.show]);\r\n\r\n  //? Reference for using with the useKeyboardActions hook to keep the state updated.\r\n  useEffect(() => {\r\n    showModalRef.current = showModal;\r\n  }, [showModal]);\r\n\r\n  if (showModal) {\r\n    return (\r\n      <Styles.Overlay>\r\n        <Styles.PanelWrapper width={attrs.width}>\r\n          <Panel padding=\"a-20\">\r\n            <Styles.CloseBtnWrapper>\r\n              <IconButton icon={{ icon: \"times\" }} onClick={handleClose} />\r\n            </Styles.CloseBtnWrapper>\r\n\r\n            <Styles.ContentBox $padding=\"r-28\">\r\n              {attrs.children}\r\n            </Styles.ContentBox>\r\n\r\n            <Styles.ButtonsWrapper>\r\n              {!attrs.cancelButton.hide && (\r\n                <Button kind=\"outlined\" onClick={handleCancel}>\r\n                  {attrs.cancelButton.text}\r\n                </Button>\r\n              )}\r\n\r\n              {!attrs.confirmButton.hide && (\r\n                <Button margin=\"l-8\" onClick={handleConfirm}>\r\n                  {attrs.confirmButton.text}\r\n                </Button>\r\n              )}\r\n            </Styles.ButtonsWrapper>\r\n          </Panel>\r\n        </Styles.PanelWrapper>\r\n      </Styles.Overlay>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n//TODO: usar las propTypes de los botones.\r\nModal.propTypes = {\r\n  cancelButton: PropTypes.shape({\r\n    hide: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    text: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n  confirmButton: PropTypes.shape({\r\n    hide: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    text: PropTypes.string,\r\n  }),\r\n  onClose: PropTypes.func,\r\n  show: PropTypes.bool,\r\n  width: PropTypes.string,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst PanelWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    border: 1px solid ${props.theme.colors.black._200};\r\n    border-radius: 4px;\r\n    box-shadow: ${props.theme.shadows.level2};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: ${props.$align};\r\n    position: relative;\r\n\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props, \"a-20\")}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  PanelWrapper,\r\n};\r\n","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"./Panel.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  align: \"start\",\r\n  children: null,\r\n  margin: \"a-0\",\r\n  onSizeH: () => {},\r\n  padding: \"a-8\",\r\n};\r\n\r\nexport const Panel = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const ref = useRef(null);\r\n\r\n  const [height, setHeight] = useState(0);\r\n\r\n  //? gets the height of the panel on the left.\r\n  useLayoutEffect(() => {\r\n    setHeight(ref.current.clientHeight);\r\n  }, []);\r\n\r\n  //? run when the height of the panel changes.\r\n  useEffect(() => {\r\n    attrs.onSizeH(height);\r\n  }, [height]); // eslint-disable-line\r\n\r\n  return (\r\n    <Styles.PanelWrapper\r\n      $align={attrs.align}\r\n      $margin={attrs.margin}\r\n      $padding={attrs.padding}\r\n      ref={ref}\r\n    >\r\n      {attrs.children}\r\n    </Styles.PanelWrapper>\r\n  );\r\n};\r\n\r\nPanel.propTypes = {\r\n  align: PropTypes.oneOf([\"center\", \"end\", \"start\"]),\r\n  children: PropTypes.node,\r\n  margin: PropTypes.string,\r\n  onSizeH: PropTypes.func,\r\n  padding: PropTypes.string,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst BarWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.orange._600};\r\n    height: 6px;\r\n    width: ${props.$porcent ? props.$porcent : \"0%\"};\r\n  `}\r\n`;\r\n\r\nconst ProgressBarWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._300};\r\n    border-radius: ${props.$borderRound && \"3px\"};\r\n    overflow: hidden;\r\n    width: 100%;\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  BarWrapper,\r\n  ProgressBarWrapper,\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"../ProgressBar.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  noShowAnimationOnFirstLoad: false,\r\n  onFinish: () => {},\r\n  step: 0,\r\n  stepTime: 10,\r\n  steps: 0,\r\n};\r\n\r\nexport const Bar = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const [width, setWidth] = useState(0);\r\n\r\n  const timer = useRef();\r\n\r\n  const animationAddStep = () => {\r\n    if (timer.current) clearTimeout(timer.current);\r\n\r\n    timer.current = setTimeout(() => {\r\n      setWidth((previusWidth) => previusWidth + 1);\r\n    }, attrs.stepTime);\r\n  };\r\n\r\n  const animationSubtractStep = () => {\r\n    if (timer.current) clearTimeout(timer.current);\r\n\r\n    timer.current = setTimeout(() => {\r\n      setWidth((previusWidth) => previusWidth - 1);\r\n    }, attrs.stepTime);\r\n  };\r\n\r\n  //? clear timer when unmounted component.\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timer.current) clearTimeout(timer.current);\r\n    };\r\n  }, []);\r\n\r\n  //? animation controller.\r\n  useEffect(() => {\r\n    const finishWidth = Math.floor((attrs.step * 100) / attrs.steps);\r\n\r\n    if (attrs.noShowAnimationOnFirstLoad) {\r\n      setWidth(finishWidth);\r\n    } else {\r\n      if (finishWidth > width) {\r\n        animationAddStep();\r\n      } else if (finishWidth < width) {\r\n        animationSubtractStep();\r\n      }\r\n    }\r\n\r\n    if (attrs.onFinish && finishWidth === width) {\r\n      attrs.onFinish();\r\n    }\r\n  }, [attrs.step, attrs.steps, width]); // eslint-disable-line\r\n\r\n  const porcentString = () => {\r\n    let porcent = width;\r\n\r\n    if (porcent <= 0) porcent = 0;\r\n    if (porcent > 100) porcent = 100;\r\n\r\n    return `${porcent}%`;\r\n  };\r\n\r\n  return <Styles.BarWrapper $porcent={porcentString()} />;\r\n};\r\n\r\nBar.propTypes = {\r\n  noShowAnimationOnFirstLoad: PropTypes.bool,\r\n  onFinish: PropTypes.func,\r\n  step: PropTypes.number,\r\n  stepTime: PropTypes.number,\r\n  steps: PropTypes.number,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst SelectPanel = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: 4px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    box-sizing: border-box;\r\n    margin-top: 4px;\r\n    max-height: ${props.$maxHeight};\r\n    overflow: auto;\r\n    padding: 4px 0;\r\n    position: absolute;\r\n    top: 30px;\r\n    z-index: 50;\r\n    width: 100%;\r\n\r\n    &::-webkit-scrollbar {\r\n      width: 6px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._300};\r\n    }\r\n  `};\r\n`;\r\n\r\nconst SelectedOption = styled(\"div\")`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst SelectedOptionWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: 4px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    height: 30px;\r\n    opacity: ${props.disabled && \"0.5\"};\r\n    width: 100%;\r\n  `};\r\n`;\r\n\r\nconst SelectWrapper = styled(\"div\")`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Styles = {\r\n  SelectPanel,\r\n  SelectedOption,\r\n  SelectedOptionWrapper,\r\n  SelectWrapper,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { SelectContext } from \"../../SelectContext\";\r\n\r\nimport { Icon, SelectOption, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./SelectContent.styles\";\r\n\r\nimport { disclosureIcon } from \"../../../../../utils/icons/icons\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  disabled: false,\r\n  maxHeight: \"auto\",\r\n};\r\n\r\nexport const SelectContent = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const ctx = useContext(SelectContext);\r\n\r\n  const handleClick = () => {\r\n    if (!attrs.disabled) {\r\n      ctx.toogleSelect();\r\n    }\r\n  };\r\n\r\n  const getValue = () => {\r\n    const option = ctx.options.find(\r\n      (option) => option.value === ctx.selectedValue,\r\n    );\r\n    return option ? option.display : null;\r\n  };\r\n\r\n  return (\r\n    <Styles.SelectWrapper>\r\n      <Styles.SelectedOptionWrapper\r\n        disabled={attrs.disabled}\r\n        onClick={handleClick}\r\n      >\r\n        <Styles.SelectedOption>\r\n          <Text margin=\"l-8\">\r\n            {getValue() || ctx.selectedValue || \"- Seleccione una opción -\"}\r\n          </Text>\r\n        </Styles.SelectedOption>\r\n\r\n        {/* disclosure icon */}\r\n        <Icon icon={disclosureIcon(ctx.isOpen)} margin=\"r-8\" size=\"sm\" />\r\n      </Styles.SelectedOptionWrapper>\r\n\r\n      {/* panel */}\r\n      {ctx.isOpen ? (\r\n        <Styles.SelectPanel $margin=\"t-8\" $maxHeight={attrs.maxHeight}>\r\n          {ctx.options.map((option) => (\r\n            <SelectOption key={`option-${option.value}`} value={option.value}>\r\n              {option.children}\r\n            </SelectOption>\r\n          ))}\r\n        </Styles.SelectPanel>\r\n      ) : null}\r\n    </Styles.SelectWrapper>\r\n  );\r\n};\r\n\r\nSelectContent.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  maxHeight: PropTypes.string,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst SelectOption = styled(\"div\")`\r\n  ${(props) => css`\r\n    cursor: pointer;\r\n    padding: 4px 8px;\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  SelectOption,\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { SelectContext } from \"../../SelectContext\";\r\n\r\nimport { Styles } from \"./SelectOption.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  value: \"\",\r\n};\r\n\r\nexport const SelectOption = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const ctx = useContext(SelectContext);\r\n\r\n  const handleClick = () => {\r\n    ctx.handleSelectedValue(attrs.value);\r\n    ctx.closeSelect();\r\n  };\r\n\r\n  return (\r\n    <Styles.SelectOption onClick={handleClick}>\r\n      {attrs.children}\r\n    </Styles.SelectOption>\r\n  );\r\n};\r\n\r\nSelectOption.propTypes = {\r\n  children: PropTypes.node,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { SelectProvider } from \"./SelectContext\";\r\n\r\nimport { SelectValue } from \"./components/SelectValue/SelectValue\";\r\nimport { SelectContent } from \"./components\";\r\nimport { Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Select.styles.js\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  disabled: false,\r\n  label: \"\",\r\n  name: \"\",\r\n  margin: \"\",\r\n  maxHeight: \"auto\",\r\n  options: [],\r\n};\r\n\r\nexport const Select = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <SelectProvider name={attrs.name} options={attrs.options}>\r\n      <SelectValue name={attrs.name} />\r\n\r\n      <Styles.Wrapper $margin={attrs.margin}>\r\n        {!!attrs.label && (\r\n          <Text\r\n            as=\"label\"\r\n            htmlFor={attrs.name}\r\n            margin=\"b-4\"\r\n            type=\"bodySemibold\"\r\n          >\r\n            {attrs.label}\r\n          </Text>\r\n        )}\r\n\r\n        <SelectContent disabled={attrs.disabled} maxHeight={attrs.maxHeight} />\r\n      </Styles.Wrapper>\r\n    </SelectProvider>\r\n  );\r\n};\r\n\r\nSelect.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  maxHeight: PropTypes.string, //? content panel height\r\n  options: PropTypes.array,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst Column = styled(\"div\")`\r\n  ${(props) => `\r\n    width: ${props.width};\r\n  `}\r\n`;\r\n\r\nconst Row = styled(\"div\")`\r\n  ${(props) => `\r\n    align-items: center;\r\n    border-bottom-color: ${props.theme.colors.black._400};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: 1px;\r\n    box-sizing: border-box;\r\n    cursor: ${!props.$isHeader ? \"pointer\" : \"default\"};\r\n    display: flex;\r\n    padding: 8px 16px;\r\n    width: 100%;\r\n\r\n    &:hover {\r\n      background-color: ${\r\n        !props.$isHeader ? props.theme.colors.black._200 : \"transparent\"\r\n      };\r\n    }\r\n\r\n    &:hover&:active {\r\n      background-color: ${\r\n        !props.$isHeader ? props.theme.colors.black._300 : \"transparent\"\r\n      };\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Column,\r\n  Row,\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Text } from \"../../..\";\r\n\r\nimport { Styles } from \"./DesktopTable.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  columns: [],\r\n  data: [],\r\n  desktopColumns: [],\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n  onClick: () => {},\r\n};\r\n\r\nexport const DesktopTable = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const list =\r\n    attrs.desktopColumns.length > 0\r\n      ? attrs.desktopColumns\r\n      : attrs.columns.length\r\n        ? attrs.columns\r\n        : [];\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={attrs.margin}>\r\n      <Styles.Row $isHeader>\r\n        {list.map((column, idxC) => (\r\n          <Styles.Column\r\n            key={`table-${attrs.name}-row-title-column-${idxC}`}\r\n            width={column.width}\r\n          >\r\n            <Text type=\"bodySemibold\">{column.label}</Text>\r\n          </Styles.Column>\r\n        ))}\r\n      </Styles.Row>\r\n\r\n      {attrs.data.map((row, idxR) => (\r\n        <Styles.Row\r\n          key={`table-row-${idxR}`}\r\n          onClick={() => attrs.onClick && attrs.onClick(row)}\r\n        >\r\n          {list.map((column, idxC) => (\r\n            <Styles.Column\r\n              key={`table-${attrs.name}-row-${idxR}-column-${idxC}`}\r\n              width={column.width}\r\n            >\r\n              {column.content(row)}\r\n            </Styles.Column>\r\n          ))}\r\n        </Styles.Row>\r\n      ))}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nDesktopTable.propTypes = {\r\n  columns: PropTypes.array,\r\n  data: PropTypes.array.isRequired,\r\n  desktopColumns: PropTypes.array,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../../../utils/styles\";\r\n\r\nconst Column = styled(\"div\")`\r\n  ${(props) => `\r\n    display: ${props.mobile?.inline ? \"inline-block\" : \"block\"};\r\n    width: ${props.mobile?.width ? props.mobile.width : \"100%\"};\r\n  `};\r\n`;\r\n\r\nconst Row = styled(\"div\")`\r\n  ${(props) => `\r\n    border-bottom-color: ${props.theme.colors.black._400};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: 1px;\r\n    box-sizing: content-box;\r\n    padding: 8px 16px;\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &:hover&:active {\r\n      background-color: ${props.theme.colors.black._300};\r\n    }\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => `\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Column,\r\n  Row,\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Text } from \"../../..\";\r\n\r\nimport { Styles } from \"./PhoneTable.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  columns: [],\r\n  data: [],\r\n  margin: \"a-0\",\r\n  mobileColumns: [],\r\n  name: \"\",\r\n  onClick: () => {},\r\n};\r\n\r\nexport const PhoneTable = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const list =\r\n    attrs.mobileColumns.length > 0\r\n      ? attrs.mobileColumns\r\n      : attrs.columns.length\r\n        ? attrs.columns\r\n        : [];\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={attrs.margin}>\r\n      {attrs.data.map((row, idx) => (\r\n        <Styles.Row\r\n          key={`table-${attrs.name}-row-${idx}`}\r\n          onClick={() => attrs.onClick && attrs.onClick(row)}\r\n        >\r\n          {list.map((column, idx) => (\r\n            <Styles.Column\r\n              key={`table-${attrs.name}-column-${idx}`}\r\n              mobile={column.mobile}\r\n            >\r\n              <Text type=\"bodySemibold\">{column.label}</Text>\r\n\r\n              {column.content(row)}\r\n            </Styles.Column>\r\n          ))}\r\n        </Styles.Row>\r\n      ))}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nPhoneTable.propTypes = {\r\n  columns: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  margin: PropTypes.string,\r\n  mobileColumns: PropTypes.array,\r\n  name: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties, paddingProperties } from \"../../../utils/styles\";\r\n\r\nconst TabsBar = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-bottom-color: ${props.theme.colors.black._200};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: 1px;\r\n\r\n    ${paddingProperties(props, \"b-1\")}\r\n  `};\r\n`;\r\n\r\nconst TabButton = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom-color: ${props.$isSelected\r\n      ? props.theme.colors.orange._600\r\n      : \"transparent\"};\r\n    border-bottom-style: solid;\r\n    border-bottom-width: 2px;\r\n\r\n    ${paddingProperties(props, \"x-20 y-8\")}\r\n\r\n    &:hover {\r\n      border-bottom-color: ${props.theme.colors.orange._300};\r\n    }\r\n  `};\r\n`;\r\n\r\nconst TabContent = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${paddingProperties(props, \"a-20\")}\r\n  `};\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n    ${paddingProperties(props)}\r\n  `};\r\n`;\r\n\r\nexport const Styles = {\r\n  TabsBar,\r\n  TabButton,\r\n  TabContent,\r\n  Wrapper,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./Tabs.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  margin: \"a-0\",\r\n  name: \"\",\r\n  padding: \"a-0\",\r\n};\r\n\r\nexport const Tabs = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const [tabsName, setTabsName] = useState([]);\r\n  const [posTabSelected, setPosTabSelected] = useState(0);\r\n\r\n  useEffect(() => {\r\n    attrs.children.forEach((elm) => {\r\n      setTabsName((prev) => [...prev, elm.props.name]);\r\n    });\r\n  }, []); // eslint-disable-line\r\n\r\n  const handleBtnClick = (e) => {\r\n    const tabIdx = tabsName.indexOf(e.target.innerText);\r\n    setPosTabSelected(tabIdx);\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper $margin={attrs.margin} $padding={attrs.padding}>\r\n      <Styles.TabsBar>\r\n        {tabsName.map((tabName, idx) => {\r\n          return (\r\n            <Styles.TabButton\r\n              key={`${attrs.name}_tab_${idx}`}\r\n              id={tabName}\r\n              $isSelected={idx === posTabSelected}\r\n              onClick={handleBtnClick}\r\n              value={tabName}\r\n            >\r\n              <Text type=\"bodySemibold\">{tabName}</Text>\r\n            </Styles.TabButton>\r\n          );\r\n        })}\r\n      </Styles.TabsBar>\r\n\r\n      <Styles.TabContent>{attrs.children[posTabSelected]}</Styles.TabContent>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nTabs.propTypes = {\r\n  children: PropTypes.node,\r\n  margin: PropTypes.string,\r\n  name: PropTypes.string,\r\n  padding: PropTypes.string,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { Field } from \"formik\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst TextArea = styled(Field)`\r\n  ${(props) => css`\r\n    border-color: ${props.theme.colors.black._400};\r\n    border-radius: 4px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    box-sizing: border-box;\r\n    padding: 8px;\r\n    resize: none;\r\n    width: 100%;\r\n\r\n    &::-webkit-scrollbar {\r\n      width: 6px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._300};\r\n    }\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  TextArea,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useFormikContext } from \"formik\";\r\n\r\nimport { Box, Text } from \"../../../\";\r\n\r\nimport { Styles } from \"./TextArea.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  description: \"\",\r\n  disabled: false,\r\n  id: \"\",\r\n  label: \"\",\r\n  name: \"\",\r\n  margin: \"a-0\",\r\n  rows: 5,\r\n};\r\n\r\nexport const TextArea = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const { setFieldValue, values } = useFormikContext();\r\n\r\n  const handleChange = (e) => {\r\n    setFieldValue(attrs.name, e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box margin={attrs.margin}>\r\n      {attrs.label && (\r\n        <Text as=\"label\" htmlFor={attrs.id} margin=\"b-4\" type=\"bodySemibold\">\r\n          {attrs.label}\r\n        </Text>\r\n      )}\r\n\r\n      {!!attrs.description && (\r\n        <Text color=\"black_400\" margin=\"b-4\" type=\"captionRegular\">\r\n          {attrs.description}\r\n        </Text>\r\n      )}\r\n\r\n      <Styles.TextArea\r\n        as=\"textarea\"\r\n        disabled={props.disabled}\r\n        id={attrs.id}\r\n        name={attrs.name}\r\n        onChange={handleChange}\r\n        rows={attrs.rows}\r\n        spellCheck=\"false\"\r\n        value={values[attrs.name]}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nTextArea.propTypes = {\r\n  description: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  id: PropTypes.string,\r\n  label: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  margin: PropTypes.string,\r\n  rows: PropTypes.number,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles/spacing\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles/spacing\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    display: grid;\r\n    grid-template-columns: repeat(${props.children.length}, 1fr);\r\n    grid-column-gap: ${props.$gap};\r\n    grid-row-gap: ${props.$gap};\r\n\r\n    ${marginProperties(props)}\r\n\r\n    @media only screen and (max-width: ${props.$minWidth}) {\r\n      grid-template-columns: repeat(1, 1fr);\r\n    }\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Wrapper } from \"./Columns.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  gap: \"24px\",\r\n  margin: \"a-0\",\r\n  minWidth: \"600px\",\r\n};\r\n\r\nexport const Columns = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Wrapper $gap={attrs.gap} $margin={attrs.margin} $minWidth={attrs.minWidth}>\r\n      {attrs.children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nColumns.propTypes = {\r\n  children: PropTypes.node,\r\n  gap: PropTypes.string,\r\n  margin: PropTypes.string,\r\n  minWidth: PropTypes.string,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: ${props.$vAlign};\r\n    display: flex;\r\n    flex-direction: ${props.$direction};\r\n    justify-content: ${props.$hAlign};\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styles } from \"./Flex.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  direction: \"row\",\r\n  hAlign: \"start\",\r\n  margin: \"a-0\",\r\n  vAlign: \"center\",\r\n};\r\n\r\nexport const Flex = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper\r\n      $direction={attrs.direction}\r\n      $margin={attrs.margin}\r\n      $hAlign={attrs.hAlign}\r\n      $vAlign={attrs.vAlign}\r\n    >\r\n      {attrs.children}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nFlex.propTypes = {\r\n  children: PropTypes.node,\r\n  direction: PropTypes.oneOf([\"column\", \"row\"]),\r\n  hAlign: PropTypes.oneOf([\r\n    \"center\",\r\n    \"end\",\r\n    \"space-around\",\r\n    \"space-between\",\r\n    \"start\",\r\n  ]),\r\n  margin: PropTypes.string,\r\n  vAlign: PropTypes.oneOf([\"center\", \"end\", \"start\"]),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../../../utils/styles\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${props.theme.colors.alert.bgColors.warning};\r\n    border-radius: 0 0 5px 5px;\r\n    box-shadow: ${props.theme.shadows.level2};\r\n    color: ${props.theme.colors.alert.colors.warning};\r\n    display: flex;\r\n    left: 50%;\r\n    position: absolute;\r\n    top: 100%;\r\n\r\n    ${paddingProperties(props, \"x-10 y-5\")}\r\n  `}\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst AvatarWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-color: ${props.$isSelected\r\n      ? `${props.theme.colors.black._500}`\r\n      : \"transparent\"};\r\n    border-radius: 50%;\r\n    border-style: solid;\r\n    border-width: 4px;\r\n    display: inline-block;\r\n\r\n    &:hover {\r\n      border-color: ${!props.$isSelected && props.theme.colors.black._600};\r\n    }\r\n  `}\r\n`;\r\n\r\nconst PanelWrapper = styled(\"div\")`\r\n  margin-top: 8px;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 100%;\r\n  width: 250px;\r\n`;\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  display: inline-block;\r\n  position: relative;\r\n  width: fit-content;\r\n`;\r\n\r\nexport const Styles = {\r\n  AvatarWrapper,\r\n  PanelWrapper,\r\n  Wrapper,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useOuterClick } from \"../../../../../hooks/useOuterClick\";\r\n\r\nimport { Panel, Image } from \"../../../../..\";\r\n\r\nimport { Styles } from \"./ProfileAvatar.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  img: null,\r\n};\r\n\r\nexport const ProfileAvatar = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const innerRef = useOuterClick(() => {\r\n    setIsOpen(false);\r\n  });\r\n\r\n  const imageAttributes = {\r\n    //? default values.\r\n    alt: \"default-alt\",\r\n    img: null,\r\n    placeholder: \"L\",\r\n    //? component values.\r\n    ...attrs.img,\r\n  };\r\n\r\n  const handleAvatarClick = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper ref={innerRef}>\r\n      <Styles.AvatarWrapper $isSelected={isOpen} onClick={handleAvatarClick}>\r\n        <Image {...imageAttributes} size=\"avatar\" type=\"round\" />\r\n      </Styles.AvatarWrapper>\r\n\r\n      {isOpen && (\r\n        <Styles.PanelWrapper>\r\n          <Panel padding=\"a-0\">{attrs.children}</Panel>\r\n        </Styles.PanelWrapper>\r\n      )}\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\n//TODO: usar las propTypes de la imagen.\r\nProfileAvatar.propTypes = {\r\n  children: PropTypes.node,\r\n  img: PropTypes.shape({\r\n    alt: PropTypes.string,\r\n    img: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n  }),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../../../utils/styles\";\r\n\r\nimport {\r\n  APP_LAYOUT_BOTTOM_HEIGHT,\r\n  APP_LAYOUT_BORDER_WIDTH,\r\n  APP_LAYOUT_BOTTOM_CONTENT_PADDING,\r\n  APP_LAYOUT_BUTTON_X_PADDING,\r\n} from \"../../../../../assets/styles/app_layout\";\r\n\r\nconst BottomContentStyles = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-top-color: ${props.theme.colors.black._200};\r\n    border-top-style: solid;\r\n    border-top-width: ${APP_LAYOUT_BORDER_WIDTH}px;\r\n\r\n    ${paddingProperties(props, `y-${APP_LAYOUT_BOTTOM_CONTENT_PADDING}`)}\r\n  `}\r\n`;\r\n\r\nconst SidebarButton = styled(\"button\")`\r\n  ${(props) => css`\r\n    background-color: transparent;\r\n    border: none;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    position: relative;\r\n    width: ${props.$isExpanded ? \"240px\" : \"56px\"};\r\n\r\n    ${paddingProperties(props, `l-18 y-${APP_LAYOUT_BUTTON_X_PADDING}`)}\r\n\r\n    &:hover {\r\n      background-color: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    /* this is the SidebarButtonTooltip */\r\n    &:hover div {\r\n      visibility: visible;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SidebarButtonTooltip = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._200}E0;\r\n    border-color: ${props.theme.colors.black._300};\r\n    border-radius: 4px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    left: calc(100% + 8px);\r\n    padding: 6px 8px;\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translate(0, -50%);\r\n    visibility: hidden;\r\n  `}\r\n`;\r\n\r\nconst SidebarButtonsWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    height: calc(100% - ${APP_LAYOUT_BOTTOM_HEIGHT}px);\r\n\r\n    &::-webkit-scrollbar {\r\n      width: 8px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: 4px;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst SidebarStyles = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    border-right-color: ${props.theme.colors.black._200};\r\n    border-right-style: solid;\r\n    border-right-width: 1px;\r\n    height: 100%;\r\n    position: relative;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  BottomContentStyles,\r\n  SidebarButton,\r\n  SidebarButtonTooltip,\r\n  SidebarButtonsWrapper,\r\n  SidebarStyles,\r\n};\r\n","//? values are in px.\r\nexport const APP_LAYOUT_BORDER_WIDTH = 1;\r\nexport const APP_LAYOUT_BUTTON_X_PADDING = 12;\r\nexport const APP_LAYOUT_BOTTOM_CONTENT_PADDING = 2;\r\nexport const APP_LAYOUT_CONTENT_HEIGHT = 20;\r\n\r\nexport const APP_LAYOUT_TOPBAR_HEIGHT = 56;\r\n\r\nexport const APP_LAYOUT_BOTTOM_HEIGHT =\r\n  APP_LAYOUT_CONTENT_HEIGHT +\r\n  APP_LAYOUT_BUTTON_X_PADDING * 2 +\r\n  APP_LAYOUT_BORDER_WIDTH +\r\n  APP_LAYOUT_BOTTOM_CONTENT_PADDING * 2;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon, Text } from \"../../../../../../\";\r\n\r\nimport { Styles } from \"../SideBar.styles\";\r\n\r\nexport const SidebarButton = (props) => {\r\n  const { btn, isExpanded, isSelected } = props;\r\n\r\n  return (\r\n    <Styles.SidebarButton\r\n      $isExpanded={isExpanded}\r\n      $isSelectedSection={isSelected}\r\n      onClick={btn.onClick}\r\n    >\r\n      <Icon\r\n        color={isSelected ? \"orange_600\" : \"black_900\"}\r\n        icon={btn.icon}\r\n        margin=\"r-8\"\r\n        size=\"sm\"\r\n      />\r\n\r\n      {isExpanded ? (\r\n        <Text\r\n          color={isSelected ? \"orange_600\" : \"black_900\"}\r\n          type=\"bodySemibold\"\r\n        >\r\n          {btn.label}\r\n        </Text>\r\n      ) : (\r\n        <Styles.SidebarButtonTooltip>{btn.label}</Styles.SidebarButtonTooltip>\r\n      )}\r\n    </Styles.SidebarButton>\r\n  );\r\n};\r\n\r\n//TODO: agregar en la constantes.\r\nSidebarButton.propTypes = {\r\n  btn: PropTypes.shape({\r\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n    to: PropTypes.string.isRequired,\r\n  }),\r\n  isExpanded: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { paddingProperties } from \"../../../utils/styles\";\r\n\r\nimport { APP_LAYOUT_TOPBAR_HEIGHT } from \"../../../assets/styles/app_layout\";\r\n\r\nexport const ContentBox = styled(\"div\")`\r\n  ${(props) => css`\r\n    background-color: ${props.theme.colors.black._100};\r\n    box-sizing: border-box;\r\n    flex-grow: 1;\r\n    height: 100%;\r\n    overflow: auto;\r\n\r\n    ${paddingProperties(props, \"a-20\")}\r\n\r\n    &::-webkit-scrollbar {\r\n      width: 8px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: 4px;\r\n    }\r\n  `}}\r\n`;\r\n\r\nexport const MainContent = styled(\"div\")`\r\n  display: flex;\r\n  height: calc(100vh - ${APP_LAYOUT_TOPBAR_HEIGHT}px);\r\n  width: 100vw;\r\n`;\r\n\r\nexport const TopBar = styled(\"div\")`\r\n  ${(props) => css`\r\n    box-sizing: border-box;\r\n    color: ${props.theme.colors.black._100};\r\n    background-color: ${props.theme.colors.black._700};\r\n    box-shadow: ${props.theme.shadows.level3};\r\n    height: ${APP_LAYOUT_TOPBAR_HEIGHT}px;\r\n    position: relative;\r\n    z-index: 100;\r\n    width: 100vw;\r\n\r\n    ${paddingProperties(props)}\r\n  `}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { OfflineBadge, ProfileAvatar, SideBar } from \"./components\";\r\nimport { Flex } from \"../../../\";\r\n\r\nimport { ContentBox, MainContent, TopBar } from \"./AppLayout.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: null,\r\n  sidebar: null,\r\n  topbar: null,\r\n};\r\n\r\nexport const AppLayout = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const sidebarButtons = attrs.sidebar ? attrs.sidebar.buttons : null;\r\n\r\n  return (\r\n    <>\r\n      <TopBar $padding=\"x-24 y-8\">\r\n        {attrs.topbar && (\r\n          <Flex hAlign=\"space-between\">\r\n            <div>{attrs.topbar.startContent}</div>\r\n\r\n            <div>\r\n              {attrs.topbar.endContent}\r\n\r\n              <ProfileAvatar pos=\"right\">\r\n                {attrs.topbar.avatarPanel}\r\n              </ProfileAvatar>\r\n            </div>\r\n          </Flex>\r\n        )}\r\n\r\n        <OfflineBadge />\r\n      </TopBar>\r\n\r\n      <MainContent>\r\n        <SideBar buttons={sidebarButtons} />\r\n\r\n        <ContentBox>{props.children}</ContentBox>\r\n      </MainContent>\r\n    </>\r\n  );\r\n};\r\n\r\n//TODO: usar las propTypes de los componentes internos para los botones, etc.\r\nAppLayout.propTypes = {\r\n  children: PropTypes.node,\r\n  sidebar: PropTypes.shape({\r\n    buttons: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        icon: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\r\n          .isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        to: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n  }),\r\n  topbar: PropTypes.shape({\r\n    endContent: PropTypes.node,\r\n    startContent: PropTypes.node,\r\n  }),\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst FileInput = styled(\"input\")`\r\n  cursor: pointer;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  opacity: 0;\r\n  top: 0;\r\n  width: 100%;\r\n`;\r\n\r\nconst UploadFileBox = styled(\"div\")`\r\n  ${(props) => css`\r\n    border-color: ${props.theme.colors.black._300};\r\n    border-radius: 4px;\r\n    border-style: dashed;\r\n    border-width: 2px;\r\n    box-sizing: border-box;\r\n    padding: 20px 0;\r\n    position: relative;\r\n    text-align: center;\r\n    width: 100%;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  FileInput,\r\n  UploadFileBox,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useDropzoneContext } from \"../../Dropzone.context\";\r\n\r\nimport { Icon, Text } from \"../../../../../\";\r\n\r\nimport {\r\n  convertBytes,\r\n  fileTypesString,\r\n} from \"../../../../../utils/files/files\";\r\n\r\nimport { Styles } from \"./UploadFileBox.styles\";\r\n\r\nexport const UploadFileBox = (props) => {\r\n  const { accept, maxSize } = props;\r\n\r\n  const ctx = useDropzoneContext();\r\n\r\n  const validTypesString = (array) => {\r\n    return array.map((type) => {\r\n      switch (type) {\r\n        case \"image\":\r\n          return \"imágenes\";\r\n        default:\r\n          return type;\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Styles.UploadFileBox\r\n      onDragOver={ctx.handleDragOver}\r\n      onDrop={ctx.handleDrop}\r\n    >\r\n      <Icon color=\"black_400\" icon=\"cloud-arrow-up\" margin=\"b-8\" size=\"xl\" />\r\n\r\n      <Text align=\"center\" color=\"black_600\" type=\"subtitle\">\r\n        Arrastre aquí o haga click para cargar archivos\r\n      </Text>\r\n\r\n      {(accept.length > 0 || maxSize !== 0) && (\r\n        <Text margin=\"t-16\" align=\"center\">\r\n          {accept.length > 0 && (\r\n            <>\r\n              Se aceptan:{\" \"}\r\n              <Text as=\"span\" type=\"bodySemibold\">\r\n                {validTypesString(accept).join(\", \")}\r\n              </Text>\r\n            </>\r\n          )}\r\n\r\n          {accept.length > 0 && maxSize !== 0 && \" | \"}\r\n\r\n          {maxSize !== 0 && (\r\n            <>\r\n              Tamñano máximo:{\" \"}\r\n              <Text as=\"span\" type=\"bodySemibold\">\r\n                {convertBytes(maxSize)}\r\n              </Text>\r\n            </>\r\n          )}\r\n        </Text>\r\n      )}\r\n\r\n      <Styles.FileInput\r\n        accept={fileTypesString(accept)}\r\n        multiple\r\n        onChange={ctx.handleFileChange}\r\n        type=\"file\"\r\n      />\r\n    </Styles.UploadFileBox>\r\n  );\r\n};\r\n\r\nUploadFileBox.propTypes = {\r\n  accept: PropTypes.array,\r\n  maxSize: PropTypes.number,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst FileItem = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    border-color: ${props.theme.colors.black._300};\r\n    border-radius: 4px;\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    box-sizing: border-box;\r\n    box-shadow: inset 4px 0 0 0\r\n      ${props.theme.colors.alert.colors[props.$status]};\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: ${props.$isLastItem ? \"0px\" : \"16px\"};\r\n    padding: 12px;\r\n    position: relative;\r\n    text-align: center;\r\n    width: 100%;\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  FileItem,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useDropzoneContext } from \"../../Dropzone.context\";\r\n\r\nimport { Flex, Icon, IconButton, Text } from \"../../../../../\";\r\n\r\nimport { convertBytes } from \"../../../../../utils/files/files\";\r\n\r\nimport { Styles } from \"./FileItem.styles\";\r\n\r\nexport const FileItem = (props) => {\r\n  const { fileItem, idx } = props;\r\n\r\n  const ctx = useDropzoneContext();\r\n\r\n  const handleDelete = () => {\r\n    ctx.deleteSelectedFiles(idx);\r\n  };\r\n\r\n  const convertErrorInText = () => {\r\n    const errorsList = [\r\n      \"El formato del archivo es inválido.\",\r\n      \"El tamaño del archivo supera el máximo permitido.\",\r\n      \"La cantidad de archivos supera la máxima cantidad permitida.\",\r\n    ];\r\n\r\n    return errorsList[fileItem.code - 1];\r\n  };\r\n\r\n  return (\r\n    <Styles.FileItem\r\n      $isLastItem={idx === ctx.fileItems.length - 1}\r\n      $status={fileItem.status}\r\n    >\r\n      <Flex>\r\n        <Icon color=\"black_600\" icon=\"file\" margin=\"r-16\" />\r\n\r\n        <div>\r\n          <Text>{fileItem.file.name}</Text>\r\n\r\n          <Text type=\"captionRegular\">\r\n            {fileItem.status === \"error\"\r\n              ? convertErrorInText()\r\n              : convertBytes(fileItem.file.size)}\r\n          </Text>\r\n        </div>\r\n      </Flex>\r\n\r\n      <IconButton icon={{ icon: \"close\" }} onClick={handleDelete} />\r\n    </Styles.FileItem>\r\n  );\r\n};\r\n\r\n//TODO: el file item tiene que estar en una constante?\r\nFileItem.propTypes = {\r\n  fileItem: PropTypes.shape({\r\n    code: PropTypes.number,\r\n    file: PropTypes.object,\r\n    status: PropTypes.string,\r\n  }),\r\n  idx: PropTypes.number,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst ListWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    box-sizing: border-box;\r\n    height: 304px;\r\n    margin-top: 16px;\r\n    overflow: auto;\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n    width: 100%;\r\n\r\n    &::-webkit-scrollbar {\r\n      width: 6px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n      background: ${props.theme.colors.black._200};\r\n      border-radius: 4px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: ${props.theme.colors.black._400};\r\n      border-radius: 4px;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Wraper = styled(\"div\")`\r\n  ${(props) => css`\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  ListWrapper,\r\n  Wraper,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useDropzoneContext } from \"../../Dropzone.context\";\r\n\r\nimport { FileItem } from \"../FileItem/FileItem\";\r\n\r\nimport { Styles } from \"../../Dropzone.styles\";\r\n\r\nexport const FilesList = (props) => {\r\n  const { name } = props;\r\n\r\n  const ctx = useDropzoneContext();\r\n\r\n  if (ctx.fileItems.length > 0) {\r\n    return (\r\n      <Styles.ListWrapper>\r\n        {ctx.fileItems.map((fileItem, idx) => (\r\n          <FileItem\r\n            fileItem={fileItem}\r\n            idx={idx}\r\n            key={`dropzone-${name}-file-${idx}`}\r\n          />\r\n        ))}\r\n      </Styles.ListWrapper>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nFilesList.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst Wrapper = styled(\"div\")`\r\n  ${(props) => {\r\n    return css`\r\n      height: 40px;\r\n      display: inline-block;\r\n      position: relative;\r\n      width: ${20 * (props.$quantity + 1)}px;\r\n    `;\r\n  }}\r\n`;\r\n\r\nconst ImageItem = styled(\"img\")`\r\n  ${(props) => {\r\n    return css`\r\n      border-radius: 50%;\r\n      height: 40px;\r\n      left: ${props.$idx * 20}px;\r\n      object-fit: cover;\r\n      position: absolute;\r\n      top: 0;\r\n      width: 40px;\r\n    `;\r\n  }}\r\n`;\r\n\r\nexport const Styles = {\r\n  ImageItem,\r\n  Wrapper,\r\n};\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Button } from \"../../../../atoms\";\r\n\r\nimport { Styles } from \"./PaginateButton.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  children: 0,\r\n  kind: \"outlined\",\r\n  onClick: () => {},\r\n};\r\n\r\nexport const PaginateButton = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <Styles.Wrapper>\r\n      <Button fullWidth kind={attrs.kind} onClick={attrs.onClick}>\r\n        {attrs.children}\r\n      </Button>\r\n    </Styles.Wrapper>\r\n  );\r\n};\r\n\r\nPaginateButton.propTypes = {\r\n  children: PropTypes.node,\r\n  kind: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nexport const Wrapper = styled(\"div\")`\r\n  ${(props) => `\r\n    align-items: end;\r\n    display: flex;\r\n    justify-content: start;\r\n    \r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n\r\nexport const Styles = {\r\n  Wrapper,\r\n};\r\n","export const createPaginateList = (page, pages, nButtons) => {\r\n  let list = [];\r\n\r\n  if (pages <= nButtons) {\r\n    list = createPagesList(pages);\r\n  } else {\r\n    let cantRightButtons = pages - page;\r\n    let cantLeftButtons = page - 1;\r\n\r\n    if (cantLeftButtons > cantRightButtons) {\r\n      let maxNumberButton = Math.min(page + 4, page + cantRightButtons);\r\n      list = createPagesList(nButtons, maxNumberButton - nButtons + 1);\r\n    } else {\r\n      let minNumberButton = Math.max(page - 4, page - cantLeftButtons);\r\n      list = createPagesList(nButtons, minNumberButton);\r\n    }\r\n  }\r\n\r\n  if (list[0] !== 1) {\r\n    list[0] = 1;\r\n    list[1] = 0;\r\n  }\r\n\r\n  if (list[list.length - 1] !== pages) {\r\n    list[list.length - 2] = 0;\r\n    list[list.length - 1] = pages;\r\n  }\r\n\r\n  return list;\r\n};\r\n\r\nconst createPagesList = (cant, initValue = 1) => {\r\n  const list = [];\r\n\r\n  for (let i = 0; i < cant; i++) {\r\n    list.push(initValue + i);\r\n  }\r\n\r\n  return list;\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { marginProperties } from \"../../../utils/styles\";\r\n\r\nconst getColor = (theme, type) => {\r\n  switch (type) {\r\n    case \"pendingCircle\":\r\n      return theme.colors.black._300;\r\n    case \"checkedCircle\":\r\n    case \"circle\":\r\n    default:\r\n      return theme.colors.orange._600;\r\n  }\r\n};\r\n\r\nconst getBgColor = (theme, type) => {\r\n  switch (type) {\r\n    case \"pendingCircle\":\r\n      return theme.colors.black._300;\r\n    case \"circle\":\r\n      return \"none\";\r\n    case \"checkedCircle\":\r\n    default:\r\n      return theme.colors.orange._600;\r\n  }\r\n};\r\n\r\nexport const Circle = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    background-color: ${getBgColor(props.theme, props.type)};\r\n    border: 3px solid ${getColor(props.theme, props.type)};\r\n    border-radius: 50%;\r\n    color: ${props.theme.colors.black._100};\r\n    display: flex;\r\n    height: 30px;\r\n    justify-content: center;\r\n    width: 30px;\r\n  `}\r\n`;\r\n\r\nexport const ProgressBarWrapper = styled(\"div\")`\r\n  flex-grow: 1;\r\n  padding: 0px 10px;\r\n`;\r\n\r\nexport const StepsWrapper = styled(\"div\")`\r\n  ${(props) => css`\r\n    align-items: center;\r\n    display: flex;\r\n\r\n    ${marginProperties(props)}\r\n  `}\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Icon, ProgressBar } from \"../../../\";\r\n\r\nimport { Circle, ProgressBarWrapper, StepsWrapper } from \"./StepsBar.styles\";\r\n\r\nconst DEFAULT_PROPS = {\r\n  margin: \"a-0\",\r\n  size: \"md\",\r\n  steps: 5,\r\n  step: 1,\r\n};\r\n\r\nexport const StepsBar = (props) => {\r\n  const attrs = {\r\n    ...DEFAULT_PROPS,\r\n    ...props,\r\n  };\r\n\r\n  const [previousStep, setPreviousStep] = useState(attrs.step);\r\n\r\n  const finishStepChange = () => {\r\n    const diff = attrs.step - previousStep;\r\n\r\n    if (diff > 0) {\r\n      setPreviousStep((prev) => prev + 1);\r\n    } else if (diff < 0) {\r\n      setPreviousStep((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  const selectTypeCircle = (renderStep) => {\r\n    if (renderStep < attrs.step) return \"checkedCircle\";\r\n    if (renderStep > attrs.step) return \"pendingCircle\";\r\n\r\n    if (renderStep === attrs.step && previousStep > attrs.step)\r\n      return \"checkedCircle\";\r\n    if (renderStep === attrs.step && previousStep < attrs.step)\r\n      return \"pendingCircle\";\r\n    if (renderStep === attrs.step) return \"circle\";\r\n  };\r\n\r\n  const noShowOldAnaimation = (renderStep) => {\r\n    const diff = attrs.step - previousStep;\r\n\r\n    const prueba = !(\r\n      (diff > 0 && renderStep === attrs.step) ||\r\n      (diff < 0 && renderStep === attrs.step + 1)\r\n    );\r\n\r\n    return prueba;\r\n  };\r\n\r\n  const renderIconInsideCircle = (renderStep) => {\r\n    if (\r\n      renderStep < attrs.step ||\r\n      (renderStep === attrs.step && previousStep > attrs.step)\r\n    ) {\r\n      return <Icon icon=\"check\" size=\"sm\" />;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const renderStep = (renderStep) => {\r\n    return (\r\n      <React.Fragment key={`step-${renderStep}`}>\r\n        {renderStep !== 1 && (\r\n          <ProgressBarWrapper>\r\n            <ProgressBar\r\n              borderRound\r\n              noShowAnimationOnFirstLoad={noShowOldAnaimation(renderStep)}\r\n              onFinish={finishStepChange}\r\n              size=\"sm\"\r\n              step={renderStep <= attrs.step ? 100 : 0}\r\n              style={{ flexGrow: \"1\" }}\r\n            />\r\n          </ProgressBarWrapper>\r\n        )}\r\n\r\n        <Circle size={attrs.size} type={selectTypeCircle(renderStep)}>\r\n          {renderIconInsideCircle(renderStep)}\r\n        </Circle>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const renderColumnSteps = () => {\r\n    let stepsArray = [];\r\n\r\n    for (let i = 1; i <= attrs.steps; i++) {\r\n      stepsArray.push(renderStep(i));\r\n    }\r\n\r\n    return <StepsWrapper $margin={attrs.margin}>{stepsArray}</StepsWrapper>;\r\n  };\r\n\r\n  return renderColumnSteps();\r\n};\r\n\r\nStepsBar.propTypes = {\r\n  margin: PropTypes.string,\r\n  size: PropTypes.oneOf([\"md\"]),\r\n  steps: PropTypes.number.isRequired,\r\n  step: PropTypes.number,\r\n};\r\n"],"names":[],"sourceRoot":""}